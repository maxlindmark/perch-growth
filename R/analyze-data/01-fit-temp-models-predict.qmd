---
title: "Fit temperature models and predict growing season temperature"
author: "Max Lindmark, Jan Ohlberger, Anna Gårdmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    fig-width: 8
    #fig-asp: 0.618
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: true
---

## Load libraries

```{r libraries and functions}
#| cache: false
pkgs <- c("here","tidyverse", "tidylog", "RColorBrewer", "viridis", "sdmTMB", "sdmTMBextra", "patchwork", "RCurl", "tidylog") 

# minpack.lm needed if using nlsLM()
if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library,character.only = T))

# devtools::install_github("seananderson/ggsidekick") # not on CRAN 
library(ggsidekick)
theme_set(theme_sleek())

# Set path:
home <- here::here()
```

Load cache

```{r}
# qwraps2::lazyload_cache_dir(path = paste0(home, "/R/analyze-data/01-fit-temp-models-predict_cache/html"))
```

## Read data

```{r}
d <- read_csv(paste0(home, "/output/temp_data_for_fitting.csv"))

d <- d |> mutate(area = as.factor(area),
                 source_f = as.factor(source),
                 year_f = as.factor(year)) |> 
  filter(!area %in% c("VN", "TH")) # VN: no logger data, TH: to short time series

# Keep track of the years for which we have cohorts for matching with cohort data
gdat <- readr::read_csv("https://raw.githubusercontent.com/maxlindmark/perch-growth/master/data/for-analysis/dat.csv")

gdat$area_cohort_age <- as.factor(paste(gdat$area, gdat$cohort, gdat$age_bc))

gdat <- gdat |>
  group_by(area_cohort_age) |> 
  filter(n() > 10) |> 
  filter(age_catch > 3) |> 
  group_by(area) |>
  summarise(min = min(cohort),
            max = max(cohort)) |> 
  arrange(min)

d <- left_join(d, gdat, by = "area") |>
  mutate(area = as.factor(area),
         growth_dat = ifelse(year >= min & year <= max, "Y", "N"))

# Drop data in SI_HA and BT before onset of warming
d <- d |>
  mutate(discard = "N",
         discard = ifelse(area == "BT" & year <= 1980, "Y", discard),
         discard = ifelse(area == "SI_HA" & year <= 1972, "Y", discard)) |> 
  filter(discard == "N")

# Drop heated areas actually for the full plot
df <- d |> filter(!area %in% c("BT", "SI_HA"))
```

## Fit models
Source as independent or interactive effect

```{r}
m <- sdmTMB(temp ~ area*year_f + source_f + s(yday, by = area, bs = "cc"), 
            data = df,
            family = student(df = 5),
            spatial = "off",
            spatiotemporal = "off",
            knots = list(yday = c(0.5, 364.5)),
            control = sdmTMBcontrol(newton_loops = 1))
```

Try alternative degrees of freedom (_not evaluated_)

```{r}
#| eval: false

#df=20 (effectively gaussian)
m2 <- sdmTMB(temp ~ area*year_f + source_f + s(yday, by = area, bs = "cc"), 
            data = d,
            family = student(df = 20),
            spatial = "off",
            spatiotemporal = "off",
            knots = list(yday = c(0.5, 364.5)),
            control = sdmTMBcontrol(newton_loops = 1))

# df = 9
m3 <- sdmTMB(temp ~ area*year_f + source_f + s(yday, by = area, bs = "cc"), 
            data = d,
            family = student(df = 9),
            spatial = "off",
            spatiotemporal = "off",
            knots = list(yday = c(0.5, 364.5)),
            control = sdmTMBcontrol(newton_loops = 1))

# df=4
m4 <- sdmTMB(temp ~ area*year_f + source_f + s(yday, by = area, bs = "cc"), 
            data = d,
            family = student(df = 4),
            spatial = "off",
            spatiotemporal = "off",
            knots = list(yday = c(0.5, 364.5)),
            control = sdmTMBcontrol(newton_loops = 1))

# Plot all residuals
mcmc_res <- residuals(m, type = "mle-mcmc",
                      mcmc_samples = sdmTMBextra::predict_mle_mcmc(m,
                                                                   mcmc_iter = 201,
                                                                   mcmc_warmup = 200))

mcmc_res20 <- residuals(m2, type = "mle-mcmc",
                        mcmc_samples = sdmTMBextra::predict_mle_mcmc(m2,
                                                                     mcmc_iter = 201,
                                                                     mcmc_warmup = 200))

mcmc_res9 <- residuals(m3, type = "mle-mcmc",
                       mcmc_samples = sdmTMBextra::predict_mle_mcmc(m3,
                                                                    mcmc_iter = 201,
                                                                    mcmc_warmup = 200))

mcmc_res4 <- residuals(m4, type = "mle-mcmc",
                       mcmc_samples = sdmTMBextra::predict_mle_mcmc(m4,
                                                                    mcmc_iter = 201,
                                                                    mcmc_warmup = 200))

dres <- df |> mutate("df=5" = mcmc_res,
                     "df=20" = mcmc_res20,
                     "df=9" = mcmc_res9,
                     "df=4" = mcmc_res4) |> 
  select(`df=5`, `df=20`, `df=9`, `df=4`) |> 
  pivot_longer(everything())

ggplot(dres, aes(sample = value)) +
  stat_qq(size = 0.75, shape = 21, fill = NA) +
  facet_wrap(~factor(name, levels = c("df=20", "df=9", "df=5", "df=4"))) +
  stat_qq_line() +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles") + 
  theme(aspect.ratio = 1)
```

## Check fit

```{r}
sanity(m)

mcmc_res <- residuals(m, type = "mle-mcmc",
                      mcmc_samples = sdmTMBextra::predict_mle_mcmc(m,
                                                                   mcmc_iter = 201,
                                                                   mcmc_warmup = 200))

ggplot(df, aes(sample = mcmc_res)) +
  stat_qq() +
  stat_qq_line() +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles") + 
  theme(aspect.ratio = 1)

ggsave(paste0(home, "/figures/supp/full_model/qq_temp.pdf"), width = 11, height = 11, units = "cm")

summary(m)
```

## Predict

```{r predict}
# Make a new data frame and predict!
nd <- data.frame(expand.grid(yday = seq(min(df$yday), max(df$yday), by = 1),
                             area = unique(df$area),
                             source = unique(df$source_f),
                             year = unique(df$year))) |>
  mutate(source_f = as.factor(source),
         year_f = as.factor(year)) |> # Left join in growth data column
  left_join(gdat, by = "area") |> 
  mutate(area = as.factor(area),
         growth_dat = ifelse(year >= min & year <= max, "Y", "N"))

# Predict
nd$pred <- predict(m, newdata = nd)$est
```

In order to have a lower temperature in before-nuclear times (without any data to inform that), we can use the nearby areas.. so FM informs BT prior to nuclear

```{r}
nd_sub <- nd |> 
  mutate(keep = "N",
         keep = ifelse(area == "FM" & year <= 1980, "Y", keep), # use FM instead of BT
         keep = ifelse(area == "SI_EK" & year <= 1972, "Y", keep)) |> # use SI_EK instead of SI_HA
  filter(keep == "Y") |> # Now change the labels to BT and SI_EK...
  mutate(area = ifelse(area == "FM", "BT", "SI_HA"))

# Bind rows and plot only the temperature series we will use for growth modelling
nd <- bind_rows(nd, nd_sub) |>
  select(-keep) |> 
  mutate(growth_dat = ifelse(area == "SI_HA" & year %in% c(1966, 1967), "Y", growth_dat)) # SI_EK and SI_HA do not have the same starting years, so we can't use allo columns from SI_EK
```

## Plot predictions

```{r}
# Trimmed plot
nd |> 
  filter(growth_dat == "Y") |> 
  ggplot(aes(yday, y = year, fill = pred, color = pred)) +
  geom_raster() +
  facet_wrap(~area, ncol = 4) +
  scale_fill_viridis(option = "magma") +
  scale_color_viridis(option = "magma") +
  labs(x = "Day-of-the-year", y = "Year", color = "Predicted SST (°C)", fill = "Predicted SST (°C)") + 
  theme(legend.position = c(0.78, 0.14))
  
ggsave(paste0(home, "/figures/supp/temp_pred_yday_area.pdf"), width = 17, height = 17, units = "cm")

# Full plot
nd |>
  ggplot(aes(yday, y = year, fill = pred, color = pred)) +
    geom_raster() +
    facet_wrap(~area, ncol = 4) +
    scale_fill_viridis(option = "magma") +
    scale_color_viridis(option = "magma") +
    labs(x = "Yearday", y = "Year", color = "Predicted SST (°C)", fill = "Predicted SST (°C)")
```

Detailed exploration of predictions

```{r}
# Loop trough all areas, plot temperature as a function of yday, color by data source, facet by year

for(i in unique(nd$area)) {
  
  plotdat <- nd |> filter(area == i)
  
  print(
    ggplot(plotdat, aes(yday, pred, color = source)) + 
      scale_color_brewer(palette = "Dark2") + 
      facet_wrap(~year) + 
      geom_point(data = filter(d, area == i & year > min(plotdat$year)), size = 0.2,
                 aes(yday, temp, color = source)) + 
      geom_line(linewidth = 0.3) + 
      labs(title = paste("Area = ", i), color = "", linetype = "") + 
      guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
      theme_sleek(base_size = 8) +
      theme(legend.position = c(0.8, 0.08), 
            legend.direction = "horizontal",
            legend.spacing.y = unit(-0.3, "cm")) + 
      labs(x = "Day of the year", y = "Predicted SST (°C)")
  )
  
  ggsave(paste0(home, "/figures/supp/full_model/temp_pred_yday_area_full_", i, ".pdf" ), width = 17, height = 17, units = "cm")
  
}
```  

Area-specific models

```{r}
spec_preds <- list()
res_list <- list()

for(i in unique(d$area)) {
  
  dd <- d |> filter(area == i)

  if(unique(dd$area) %in% c("BS", "BT", "FB", "FM", "MU", "SI_EK")) { # RA, JM, HO, SI_HA remains
    
    mspec <- sdmTMB(temp ~ 0 + source_f + year_f + s(yday, bs = "cc"), 
                    data = dd,
                    family = student(df = 6),
                    spatial = "off",
                    spatiotemporal = "off",
                    knots = list(yday = c(0.5, 364.5)),
                    control = sdmTMBcontrol(newton_loops = 1)) 
  
  } else {
    
    mspec <- sdmTMB(temp ~ 0 + source_f + year_f + s(yday, bs = "cc"), 
                    data = dd,
                    family = student(df = 10),
                    spatial = "off",
                    spatiotemporal = "off",
                    knots = list(yday = c(0.5, 364.5)),
                    control = sdmTMBcontrol(newton_loops = 1)) 
    
  }
  
  sanity(mspec)

  # Residuals
  mcmc_res_msep <- residuals(mspec, type = "mle-mcmc",
                             mcmc_samples = sdmTMBextra::predict_mle_mcmc(mspec,
                                                                          mcmc_iter = 201,
                                                                          mcmc_warmup = 200))
  
  dd$res <- as.vector(mcmc_res_msep)
    
  # Store residuals
  res_list[[i]] <- dd
  
  print(ggplot(dd, aes(sample = mcmc_res_msep)) +
    stat_qq(size = 0.75, shape = 21, fill = NA) +
    stat_qq_line() +
    labs(y = "Sample Quantiles", x = "Theoretical Quantiles", title = paste("Area = ", i)) + 
    theme(aspect.ratio = 1))
  
  # Predict on new data
  nd_area <- data.frame(expand.grid(yday = seq(min(dd$yday), max(dd$yday), by = 1),
                                    area = unique(dd$area),
                                    source = unique(dd$source_f),
                                    year = unique(dd$year))) |>
    mutate(source_f = as.factor(source),
           year_f = as.factor(year)) |> 
    left_join(gdat, by = "area") |> 
    mutate(area = as.factor(area),
           growth_dat = ifelse(year >= min & year <= max, "Y", "N"))
  
  nd_area$pred <- predict(mspec, newdata = nd_area)$est

  # Save!
  spec_preds[[i]] <- nd_area
  
}

nd_area <- dplyr::bind_rows(spec_preds)
area_res <- dplyr::bind_rows(res_list)

# Plot residuals
dfs <- data.frame(area = c("BS", "BT", "FB", "FM", "MU", "SI_EK", "RA", "JM", "HO", "SI_HA"),
                  df = c(rep("\u03BD = 6", 7), rep("\u03BD = 10", 3)))
  
area_res |> 
  ggplot(aes(sample = res)) +
  stat_qq(size = 0.75, shape = 21, fill = NA) +
  facet_wrap(~area) +
  stat_qq_line() +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles") +
  geom_text(data = dfs, aes(label = df, hjust = -0.1, vjust = 1.25), inherit.aes = FALSE,
              x = -Inf, y = Inf, size = 2.6, color = "grey20") +
  theme(aspect.ratio = 1)

ggsave(paste0(home, "/figures/supp/qq_temp_area.pdf"), width = 17, height = 17, units = "cm", device = cairo_pdf)

# In order to have a lower temperature in before-nuclear times (without any data to inform that), we can use the nearby areas.. so FM informs BT prior to nuclear
nd_area_sub <- nd_area |> 
  mutate(keep = "N",
         keep = ifelse(area == "FM" & year <= 1980, "Y", keep), # use FM instead of BT
         keep = ifelse(area == "SI_EK" & year <= 1972, "Y", keep)) |> # use SI_EK instead of SI_HA
  filter(keep == "Y") |> # Now change the labels to BT and SI_EK...
  mutate(area = ifelse(area == "FM", "BT", "SI_HA"))

# Bind rows and plot only the temperature series we will use for growth modelling
nd_area <- bind_rows(nd_area, nd_area_sub) |>
  select(-keep) |> 
  mutate(growth_dat = ifelse(area == "SI_HA" & year %in% c(1966, 1967), "Y", growth_dat)) # SI_EK and SI_HA do not have the same starting years, so we can't use allo columns from SI_EK

nd_area |> 
  filter(area %in% c("FM", "BT", "SI_EK", "SI_HA")) |> 
  filter(year <= 1980 & year >= 1966) |> 
  group_by(area, year) |> 
  summarise(mean_temp = mean(pred)) |> 
  ungroup() |> 
  pivot_wider(names_from = area, values_from = mean_temp)
```

Plot detailed exploration of predictions

```{r}
# Loop trough all areas, plot temperature as a function of yday, color by data source, facet by year

for(i in unique(nd_area$area)) {
  
  plotdat <- nd_area |> filter(area == i)
  
  print(
    ggplot(plotdat, aes(yday, pred, color = source)) + 
      scale_color_brewer(palette = "Dark2") + 
      facet_wrap(~year) + 
      geom_point(data = filter(d, area == i & year > min(plotdat$year)), size = 0.2,
                 aes(yday, temp, color = source)) + 
      geom_line(linewidth = 0.3) + 
      labs(title = paste("Area = ", i), color = "", linetype = "") + 
      guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
      theme_sleek(base_size = 8) +
      theme(legend.position = "bottom", 
            legend.direction = "horizontal",
            legend.spacing.y = unit(-0.3, "cm")) + 
      labs(x = "Day of the year", y = "Predicted SST (°C)")
  )
  
  ggsave(paste0(home, "/figures/supp/temp_pred_yday_area_", i, ".pdf" ), width = 17, height = 17, units = "cm")
  
}

# Same but trimmed
for(i in unique(nd_area$area)) {
  
  plotdat <- nd_area |> filter(area == i) |> filter(growth_dat == "Y")
  
  print(
    ggplot(plotdat, aes(yday, pred, color = source)) + 
      scale_color_brewer(palette = "Dark2") + 
      facet_wrap(~year) + 
      geom_point(data = filter(d, area == i & year > min(plotdat$year)), size = 0.2,
                 aes(yday, temp, color = source)) + 
      geom_line(linewidth = 0.3) + 
      labs(title = paste("Area = ", i), color = "", linetype = "") + 
      guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
      theme_sleek(base_size = 8) +
      theme(#legend.position = c(0.8, 0.08), 
            legend.position = "bottom", 
            legend.direction = "horizontal",
            legend.spacing.y = unit(-0.3, "cm")) + 
      labs(x = "Day of the year", y = "Predicted SST (°C)")
  )
  
  ggsave(paste0(home, "/figures/supp/temp_pred_yday_area_trimmed_", i, ".pdf" ), width = 17, height = 17, units = "cm")
  
}
```  

Compare predictions from full and area-specific models

```{r}
long_preds <- bind_rows(nd_area |> filter(growth_dat == "Y") |> mutate(model = "area-specific"),
                        nd |> filter(growth_dat == "Y") |> mutate(model = "full model"))


for(i in unique(long_preds$area)) {
  
  plotdat <- long_preds |> filter(area == i)
  
  print(
    ggplot(plotdat, aes(yday, pred, color = source, linetype = model)) + 
      scale_color_brewer(palette = "Dark2") + 
      facet_wrap(~year) + 
      geom_point(data = filter(d, area == i & growth_dat == "Y"), size = 0.2,
                 aes(yday, temp, color = source), inherit.aes = FALSE) + 
      geom_line(linewidth = 0.3) + 
      guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
      theme_sleek(base_size = 8) +
      theme(legend.position = "bottom", 
            legend.direction = "horizontal",
            legend.spacing.y = unit(-0.3, "cm")) + 
      labs(x = "Day of the year", y = "Predicted SST (°C)",
           title = paste("Area = ", i), color = "", linetype = "")
  )
  
  ggsave(paste0(home, "/figures/supp/full_model/temp_pred_comp_area_model_", i, ".pdf" ), width = 17, height = 17, units = "cm")
  
}


# Join wide data to plot differences easily
wide_pred <- left_join(nd_area |> 
                         dplyr::select(yday, area, year, pred, source) |> 
                         pivot_wider(names_from = source, values_from = pred) |> 
                         rename(logger_as = logger,
                                errs_as = errs,
                                fishing_as = fishing),
                       
                       nd |> 
                         dplyr::select(yday, area, year, pred, source) |> 
                         pivot_wider(names_from = source, values_from = pred) |> 
                         rename(logger_full = logger,
                                errs_full = errs,
                                fishing_full = fishing),
                       
                       by = c("yday", "area", "year"))
  
  
diff_pred <- wide_pred |> 
  mutate(logger_diff = logger_as - logger_full,
         errs_diff = errs_as - errs_full,
         fishing_diff = fishing_as - fishing_full) |> 
  select(yday, area, year, logger_diff, errs_diff, fishing_diff) |> 
  pivot_longer(c("logger_diff", "errs_diff", "fishing_diff"))


for(i in unique(diff_pred$area)) {
  
  plotdat <- diff_pred |> filter(area == i)
  
  print(ggplot(plotdat, aes(yday, value, color = name)) + 
      facet_wrap(~year) +  
      scale_color_brewer(palette = "Dark2") + 
      geom_hline(yintercept = 0, linetype = 2, alpha = 0.5) + 
      geom_line() +
      labs(x = "Day of the year", y = "Predicted SST (°C)",
           title = paste("Area = ", i), color = "", linetype = ""))
}

```

Plot summarized data and predictions

```{r}
# Summarise data
dsum <- d |> 
  group_by(year, area, source) |> 
  summarise(temp = mean(temp)) |> 
  mutate(type = "data")

# Summarise predictions from full model and area-specific model
preds <- nd |> 
  filter(growth_dat == "Y" & source == "logger") |> 
  group_by(area, year) |> 
  summarise(temp = mean(pred)) |> 
  mutate(model = "full model")

preds_area <- nd_area |> 
  filter(growth_dat == "Y" & source == "logger") |> 
  group_by(area, year) |> 
  summarise(temp = mean(pred)) |> 
  mutate(model = "area model")

preds_comb <- bind_rows(preds, preds_area)

ggplot(preds_comb, aes(year, temp, color = source, linetype = model)) + 
  geom_point(data = dsum, aes(year, temp, color = source), size = 0.75, alpha = 0.75, inherit.aes = FALSE) + 
  scale_color_brewer(palette = "Accent") +
  geom_line(linewidth = 0.5, color = "grey20") + 
  facet_wrap(~area, ncol = 3) +
  theme(legend.position = "bottom")
```

Make final plot using the area-specific model

```{r}
# Overall t_opt from 02-fit-vbge.qmd! Update when I got final model!
topt_lwr <- 6.681641
topt <- 8.632517
topt_upr <- 14.06710

# Add latitude
area <- c("BS", "BT", "FB", "FM", "HO", "JM", "MU", "RA", "SI_EK", "SI_HA")
nareas <- length(area)
lat <- c(60, 60.4, 60.3, 60.5, 63.7, 58, 59, 65.9, 57.3, 57.4)
lon <- c(21.5, 18.1, 19.5, 18, 20.9, 16.8, 18.1, 22.3, 16.6, 16.7)
area_attr <- data.frame(cbind(area = area, lat = lat, lon = lon)) |>
  mutate_at(c("lat","lon"), as.numeric) |> 
  arrange(desc(lat))

ggplot(preds_area, aes(year, temp, color = temp)) + 
  facet_wrap(~factor(area, levels = area_attr$area), ncol = 4) + 
  geom_hline(yintercept = topt_lwr, linewidth = 0.3, linetype = 2, color = "tomato3", alpha = 0.3) +
  geom_hline(yintercept = topt, linewidth = 0.3, linetype = 1, color = "tomato3", alpha = 0.3) +
  geom_hline(yintercept = topt_upr, linewidth = 0.3, linetype = 2, color = "tomato3", alpha = 0.3) +
  geom_line(linewidth = 0.6) +
  labs(x = "Year", y = "Model-predicted annual average temperature") + 
  scale_color_viridis(option = "magma", name = "Area") +
  guides(color = "none") 

ggsave(paste0(home, "/figures/annual_average_temperature.pdf"), width = 17, height = 12, units = "cm")

# Check year range
preds_area |> 
  group_by(area) |> 
  summarise(min = min(year),
            max = max(year)) |> 
  arrange(min)

# Check temperature range
preds_area |> 
  group_by(area) |> 
  summarise(min = min(temp),
            max = max(temp)) |> 
  arrange(min)
```

```{r}
# Save prediction df
write_csv(preds_area, paste0(home, "/output/gam_predicted_temps.csv"))
```

```{r}
knitr::knit_exit()
```

Code below is not evaluated!

Growing season? This might be different for different areas... 

```{r}
# Find day of the year where temperature exceeds 10C by area across years
# TODO: Also for area-specific predictions?
gs_area <- nd |> 
  group_by(area, yday) |> 
  summarise(mean_pred = mean(pred)) |>
  ungroup() |> 
  filter(mean_pred > 10) |> 
  group_by(area) |> 
  summarise(gs_min = min(yday),
            gs_max = max(yday))

nd <- left_join(nd, gs_area, by = "area")

gs_area$mean_pred <- 10

# Plot!
nd |> 
  #filter(growth_dat == "Y") |> 
  group_by(area, yday) |> 
  summarise(mean_pred = mean(pred)) |> 
  ggplot(aes(yday, mean_pred)) +
  geom_line() +
  labs(x = "Yearday", y = "Year", color = "Predicted SST (°C)", fill = "Predicted SST (°C)") + 
  facet_wrap(~area) +
  geom_point(data = gs_area, aes(gs_min, mean_pred), inherit.aes = FALSE, color = "tomato2") + 
  geom_point(data = gs_area, aes(gs_max, mean_pred), inherit.aes = FALSE, color = "tomato2") +
  geom_hline(yintercept = 10, linetype = 2)
```

Now see if there is a systematic pattern in the difference between predicted and observed logger data, which could indicate that the source effect isn't global but area-specific.

```{r}
dlog <- d |> 
  filter(source == "logger") |> 
  mutate(type = "data",
         id = paste(area, year, yday, sep = "_")) |> 
  select(id, temp) |> 
  group_by(id) |> 
  summarise(obs = mean(temp)) # sometimes we have more than 1 observation per id

# dlog |> 
#   group_by(id) |> 
#   summarise(n = n()) |> 
#   distinct(n)

preds_log <- nd |> 
  filter(growth_dat == "Y" & source == "logger") |> 
  mutate(type = "model",
         id = paste(area, year, yday, sep = "_")) |> 
  filter(id %in% unique(dlog$id)) |> 
  ungroup() |> 
  left_join(dlog, by = "id")

p1 <- preds_log |> 
  mutate(resid = pred - obs) |> 
  ggplot(aes(as.factor(area), resid, group = as.factor(area))) +
  #geom_jitter(alpha = 0.05, color = "grey20", height = 0, width = 0.2) + 
  geom_violin(fill = "grey70", color = NA) +
  geom_boxplot(width = 0.2, outlier.colour = NA, outlier.color = NA, outlier.fill = NA) +
  guides(color = "none") +
  geom_hline(yintercept = 0, linetype = 2, color = "tomato3", linewidth = 0.75) + 
  labs(x = "Area", y = "Manual residuals")

p1

p1 + facet_wrap(~year) 
```

Some extra plots for BT especially, because it seems that the offset for logger isn't that big in years without any logger data.. First predict BT only but with all data sources. *Note* this code is not run anymore and is instead expanded above to work on all areas

```{r}
#| eval: false

# Predict
ndbt <- data.frame(expand.grid(yday = seq(min(d$yday), max(d$yday), by = 1),
                               year = seq(1980, #filter(gdat, area == "BT")$min, 
                                          2004), #filter(gdat, area == "BT")$min),
                               source = unique(d$source))) |>
  mutate(area = "BT") |> 
  mutate(area = as.factor(area),
         source_f = as.factor(source),
         year_f = as.factor(year)) 

ndbt$pred <- predict(m, newdata = ndbt)$est

# Plot
ggplot(ndbt, aes(yday, pred, color = source)) + 
  scale_color_brewer(palette = "Accent") + 
  facet_wrap(~year) + 
  geom_point(data = filter(d, area == "BT" & year >= min(ndbt$year) & year <= max(ndbt$year)), size = 0.2,
             aes(yday, temp)) + 
  geom_line() + 
  labs(title = "Area = BT", color = "") + 
  guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
  theme_sleek(base_size = 8) +
  theme(legend.position = "bottom", 
        legend.direction = "horizontal",
        legend.spacing.y = unit(-0.3, "cm")) + 
  labs(x = "Day of the year", y = "Predicted SST (°C)")

ggsave(paste0(home, "/figures/supp/BT_test_plots.pdf" ), width = 17, height = 17, units = "cm")

# Right, so there is an offset... but it's not big. And the cold temperatures in
# certain years in the 1980's is not due to the offset not working, just that the year
# effect in that year is only informed by cold temperatures and there's no "memory"... 
# Though it seems also that there could be a bigger offset.. perhaps this indicates
# the source should indeed vary by area? Maybe, we if we fit models by area separately instead? Then we don't
# need the area interaction, and we can instead use a random walk or AR1 structure one
# the year effect?

dbt <- d |> filter(area == "BT")

mbt <- sdmTMB(temp ~ 0 + source_f + year_f + s(yday, bs = "cc"), 
              data = dbt,
              family = student(df = 5),
              spatial = "off",
              spatiotemporal = "off",
              knots = list(yday = c(0.5, 364.5)),
              control = sdmTMBcontrol(newton_loops = 1))

sanity(mbt)
summary(mbt)

# Predict
ndbt2 <- data.frame(expand.grid(yday = seq(min(d$yday), max(d$yday), by = 1),
                                year = seq(1980, #filter(gdat, area == "BT")$min, 
                                           2004), #filter(gdat, area == "BT")$min),
                                source = unique(d$source))) |>
  mutate(source_f = as.factor(source),
         year_f = as.factor(year)) 

ndbt2$pred <- predict(mbt, newdata = ndbt2)$est

# Plot without data
ggplot(filter(d, area == "BT" & year >= min(ndbt$year) & year <= max(ndbt$year)),
       aes(yday, temp, color = source)) + 
  geom_line(data = ndbt, aes(yday, pred, color = source, linetype = "main model"), alpha = 0.2) +
  geom_line(data = ndbt2, aes(yday, pred, color = source, linetype = "BT specific model"), alpha = 0.2) + 
  scale_color_brewer(palette = "Dark2") + 
  facet_wrap(~year) + 
  labs(title = "Area = BT", color = "", linetype = "") + 
  guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
  theme_sleek(base_size = 8) +
  theme(legend.position = "bottom", 
        legend.direction = "horizontal",
        legend.spacing.y = unit(-0.3, "cm")) + 
  labs(x = "Day of the year", y = "Predicted SST (°C)")

ggsave(paste0(home, "/figures/supp/BT_test_plots2.pdf" ), width = 17, height = 17, units = "cm")

# Plot with data
ggplot(filter(d, area == "BT" & year >= min(ndbt$year) & year <= max(ndbt$year)),
       aes(yday, temp, color = source)) + 
  geom_point(size = 0.001, alpha = 0.3) + 
  geom_line(data = ndbt, aes(yday, pred, color = source, linetype = "main model"), alpha = 0.7) +
  geom_line(data = ndbt2, aes(yday, pred, color = source, linetype = "BT specific model"), alpha = 0.7) + 
  scale_color_brewer(palette = "Dark2") + 
  facet_wrap(~year) + 
  labs(title = "Area = BT", color = "", linetype = "") + 
  guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
  theme_sleek(base_size = 8) +
  theme(legend.position = "bottom", 
        legend.direction = "horizontal",
        legend.spacing.y = unit(-0.3, "cm")) + 
  labs(x = "Day of the year", y = "Predicted SST (°C)")

ggsave(paste0(home, "/figures/supp/BT_test_plots3.pdf" ), width = 17, height = 17, units = "cm")

# Plot only new predictions, color by year facet by source?
p1 <- ggplot() + 
  geom_line(data = ndbt2, aes(yday, pred, color = year, group = year), alpha = 0.7, linewidth = 0.2) + 
  scale_color_viridis() + 
  facet_wrap(~source) + 
  labs(title = "Area = BT", color = "", linetype = "") + 
  guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
  theme_sleek(base_size = 8) +
  theme(legend.position = "bottom", 
        legend.direction = "horizontal",
        legend.spacing.y = unit(-0.3, "cm")) + 
  coord_cartesian(ylim = c(0, 25)) +
  labs(x = "Day of the year", y = "Predicted SST (°C)", title = "BT specific model")

p2 <- ggplot() + 
  geom_line(data = ndbt, aes(yday, pred, color = year, group = year), alpha = 0.7, linewidth = 0.2) + 
  scale_color_viridis() + 
  facet_wrap(~source) + 
  labs(title = "Area = BT", color = "", linetype = "") + 
  guides(color = guide_legend(title.position = "top", title.hjust = 0.5)) + 
  theme_sleek(base_size = 8) +
  theme(legend.position = "bottom", 
        legend.direction = "horizontal",
        legend.spacing.y = unit(-0.3, "cm")) + 
  coord_cartesian(ylim = c(0, 25)) +
  labs(x = "Day of the year", y = "Predicted SST (°C)", title = "main model")

p1 / p2

ggsave(paste0(home, "/figures/supp/BT_test_plots4.pdf" ), width = 17, height = 17, units = "cm")

# Now plot the annual means. Focus on 1980-2004, so that we don't need to worry about
# the Forsmark predictions in years before heating

ndbt_sum <- ndbt |> 
  filter(source == "logger") |> 
  group_by(year) |> 
  summarise(mean_pred = mean(pred)) |> 
  mutate(model = "main model")

ndbt2_sum <- ndbt2 |> 
  filter(source == "logger") |> 
  group_by(year) |> 
  summarise(mean_pred = mean(pred)) |> 
  mutate(model = "BT-specific model")

bt_sums <- bind_rows(ndbt_sum, ndbt2_sum)

ggplot(bt_sums, aes(year, mean_pred, color = model)) + 
  geom_line() +
  labs(x = "Year", y = "Model-predicted annual average temperature") + 
  scale_color_brewer(palette = "Accent")

ggsave(paste0(home, "/figures/supp/BT_test_plots5.pdf" ), width = 17, height = 17, units = "cm")
```

If we want to get uncertainty, we can use nsim instead; this simulates from the linear predictor using the inverse precision matrix, which is a fast way to get a distribution of samples from which we can take e.g. quantiles and means. However, it's still slow, so the code below isn't executed yet.

```{r}
#| eval: false
nd_sim <- data.frame(expand.grid(yday = seq(min(d$yday), max(d$yday), by = 1),
                                 area = unique(d$area),
                                 year = unique(d$year))) |>
  mutate(source = "logger") |>
  mutate(id = paste(year, area, sep = "_"),
         source_f = as.factor(source),
         year_f = as.factor(year))

# Trim!
nd_sim <- left_join(nd_sim, gdat, by = "area")

nd_sim <- nd_sim |>
  mutate(growth_dat = ifelse(year > min, "Y", "N")) |>
  filter(growth_dat == "Y") |>
  filter(yday %in% c(gs_min:gs_min)) |>
  mutate(area = as.factor(area))

# Predict!
nsim <- 500
m_pred_sims <- predict(m, newdata = nd_sim, nsim = nsim)

# Join sims with prediction data
nd_sim_long <- cbind(nd_sim, as.data.frame(m_pred_sims)) |>
    pivot_longer(c((ncol(nd_sim) + 1):(nsim + ncol(nd_sim))))

# Summarize sims over growing season
sum_pred_gs <- nd_sim_long |>
    ungroup() |>
    group_by(year, area) |>
    summarise(lwr = quantile(value, prob = 0.1),
              est = quantile(value, prob = 0.5),
              upr = quantile(value, prob = 0.9)) |>
    ungroup()

# In order to have a lower temperature in before-nuclear times (without any data to inform that), we can use the nearby areas..
sum_pred_gs <- preds |>
  mutate(keep = "Y",
         keep = ifelse(area == "BT" & year < 1980, "N", keep),
         keep = ifelse(area == "SI_HA" & year < 1972, "N", keep)) |>
  filter(keep == "Y")

sum_pred_gs_sub <- preds |>
  mutate(keep = "N",
         keep = ifelse(area == "FM" & year < 1980, "Y", keep), # use FM instead of BT
         keep = ifelse(area == "SI_EK" & year < 1972, "Y", keep)) |> # use SI_EK instead of SI_HA
  filter(keep == "Y")

# Now change the labels to BT and SI_EK...
sum_pred_gs_sub <- sum_pred_gs_sub |>
  mutate(area = ifelse(area == "FM", "BT", "SI_HA"))

# Bind rows and plot only the temperature series we will use for growth modelling
sum_pred_gs <- bind_rows(sum_pred_gs, sum_pred_gs_sub) |> select(-keep, -type)

order <- sum_pred_gs |>
  group_by(area) |>
  summarise(mean_temp = mean(temp)) |>
  arrange(desc(mean_temp))
```