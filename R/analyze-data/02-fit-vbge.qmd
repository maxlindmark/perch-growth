---
title: "Fit VBGE models to back-calculated length-at-age"
author: "Max Lindmark, Jan Ohlberger, Anna GÃ¥rdmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    fig-width: 8
    #fig-asp: 0.618
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: true
---

## Load libraries

```{r}
#| cache: false
pkgs <- c("tidyverse", "tidylog", "rTPC", "nls.multstart", "broom", "RColorBrewer", 
          "viridis", "minpack.lm", "patchwork", "ggtext", "brms", "tidybayes", "modelr")

# minpack.lm needed if using nlsLM()
if(length(setdiff(pkgs, rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library,character.only = T))

# devtools::install_github("seananderson/ggsidekick") ## not on CRAN 
library(ggsidekick)
theme_set(theme_sleek())

# Load functions
home <- here::here()
fxn <- list.files(paste0(home, "/R/functions"))
invisible(sapply(FUN = source, paste0(home, "/R/functions/", fxn)))
```

Load cache

```{r}
# qwraps2::lazyload_cache_dir(path = paste0(home, "/R/analyze-data/02-fit-vbge_cache/html"))
```

## Read and trim data

```{r}
d <- #read_csv(paste0(home, "/data/for-analysis/dat.csv")) |> 
  read_csv("https://raw.githubusercontent.com/maxlindmark/perch-growth/master/data/for-analysis/dat.csv") |> 
  filter(age_ring == "Y", # use only length-at-age by filtering on age_ring
         !area == "VN") 

# Sample size by area and cohort
ns <- d |> 
  group_by(cohort, area) |> 
  summarise(n = n())

# Minimum number of observations per area and cohort
d$area_cohort <- as.factor(paste(d$area, d$cohort))

d <- d |>
  group_by(area_cohort) |> 
  filter(n() > 100)

# Minimum number of observations per area, cohort, and age
d$area_cohort_age <- as.factor(paste(d$area, d$cohort, d$age_bc))

d <- d |>
  group_by(area_cohort_age) |> 
  filter(n() > 10)

# Minimum number of cohorts in a given area
cnt <- d |>
  group_by(area) |>
  summarise(n = n_distinct(cohort)) |>
  filter(n >= 10)

d <- d[d$area %in% cnt$area, ]

# Plot cleaned data
ggplot(d, aes(age_bc, length_mm)) +
  geom_jitter(size = 0.1, height = 0, alpha = 0.1) +
  scale_x_continuous(breaks = seq(20)) +
  theme(axis.text.x = element_text(angle = 0)) +
  theme(axis.text = element_text(size = 12), axis.title = element_text(size = 15)) +
  labs(x = "Age", y = "Length (mm)") +
  guides(color = "none") + 
  facet_wrap(~area, scale = "free_x")

# Longitude and latitude attributes for each area
area <- c("BS", "BT", "FB", "FM", "HO", "JM", "MU", "RA", "SI_EK", "SI_HA", "TH")
nareas <- length(area)
lat <- c(60, 60.4, 60.3, 60.5, 63.7, 58, 59, 65.9, 57.3, 57.4, 56.1)
lon <- c(21.5, 18.1, 19.5, 18, 20.9, 16.8, 18.1, 22.3, 16.6, 16.7, 15.9)
area_attr <- data.frame(cbind(area = area, lat = lat, lon = lon)) |>
  mutate_at(c("lat", "lon"), as.numeric)
```

## Fit VBGE models

```{r}
# Get individual growth parameters (functions: VBGF/Gompertz,nls_out,fit_nls)
IVBG <- d |> 
  group_by(ID) |> 
  summarize(k = nls_out(fit_nls(length_mm, age_bc, min_nage = 4, model = "VBGF"))$k,
            k_se = nls_out(fit_nls(length_mm, age_bc, min_nage = 4, model = "VBGF"))$k_se,
            linf = nls_out(fit_nls(length_mm, age_bc, min_nage = 4, model = "VBGF"))$linf,
            linf_se = nls_out(fit_nls(length_mm, age_bc, min_nage = 4, model = "VBGF"))$linf_se)
```

## Inspect predictions

```{r}
#| include: false 
#| eval: false 

na_ids <- IVBG |>
  mutate(na = ifelse(is.na(k_se) == TRUE, "na", "not na")) |>
  select(ID, na)

test <- d |>
  ungroup() |>
  left_join(na_ids)

test |>
  mutate(age_group = ifelse(age_catch >= 4, "4 or older", "1-3")) |>
  ggplot(aes(age_catch, fill = age_group)) +
  geom_histogram() +
  facet_wrap(~na, ncol = 1)

# There are some NA's that *are* the right age, and no NAs below the correct age
# They just don't seem to converge!
test2 <- test |>
  ungroup() |>
  filter(na == "na") |>
  filter(age_catch > 4) |> # age 4 was the min_age argument
  arrange(ID) |>
  as.data.frame()

test3 <- d |> filter(ID == "1970.211.JM.female.5.K010")

plot(test3$age_bc, test3$length_mm)

nls_out(fit_nls(test3$length_mm, test3$age_bc, min_nage = 4, model = "VBGF"))
```

```{r}
IVBG <- IVBG |> drop_na(k) # The NAs are because the model didn't converge or because they were below the threshold age

IVBG <- IVBG |>
  mutate(k_lwr = k - 1.96*k_se,
         k_upr = k + 1.96*k_se,
         linf_lwr = linf - 1.96*linf_se,
         linf_upr = linf + 1.96*linf_se,
         row_id = row_number())

# Plot all K's
IVBG |>
  #filter(row_id < 5000) |>
  ggplot(aes(row_id, k, ymin = k_lwr, ymax = k_upr)) +
  geom_point(alpha = 0.5) +
  geom_errorbar(alpha = 0.5) +
  NULL

# Plot all L_inf's
IVBG |>
  #filter(row_id < 5000) |>
  ggplot(aes(row_id, linf, ymin = linf_lwr, ymax = linf_upr)) +
  geom_point(alpha = 0.5) +
  geom_errorbar(alpha = 0.5) +
  NULL

# We can also consider removing individuals where the SE of k is larger than the fit
IVBG |>
  #mutate(keep = ifelse(k > quantile(k_se, probs = 0.95), "N", "Y")) |>
  mutate(keep = ifelse(k < k_se, "N", "Y")) |>
  #filter(row_id < 10000) |>
  ggplot(aes(row_id, k, ymin = k_lwr, ymax = k_upr, color = keep)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~keep, ncol = 1) +
  geom_errorbar(alpha = 0.5) +
  NULL

# Add back cohort and area variables
IVBG <- IVBG |> 
  left_join(d |> select(ID, area_cohort)) |> 
  separate(area_cohort, into = c("area", "cohort"), remove = TRUE, sep = " ") |> 
  mutate(cohort = as.numeric(cohort))

# Summarise and save for sample size
sample_size <- IVBG |>
  group_by(area) |> 
  summarise(n_cohort = length(unique(cohort)),
            min_cohort = min(cohort),
            max_cohort = min(cohort),
            n_individuals = length(unique(ID)),
            n_data_points = n())

sample_size

sample_size |>
  ungroup() |>
  summarise(sum_ind = sum(n_individuals), sum_n = sum(n_data_points))

write_csv(sample_size, paste0(home, "/output/sample_size.csv"))

# Compare how the means and quantiles differ depending on this filtering
IVBG_filter <- IVBG |>
  drop_na(k_se) |>
  #filter(k_se < quantile(k_se, probs = 0.95)) |> 
  filter(k_se < k)

# Summarize growth coefficients by cohort and area
VBG <- IVBG |>
  filter(k_se < k) |> # new!
  group_by(cohort, area) |>
  summarize(k_mean = mean(k, na.rm = T),
            k_median = quantile(k, prob = 0.5, na.rm = T),
            linf_median = quantile(linf, prob = 0.5, na.rm = T),
            k_lwr = quantile(k, prob = 0.05, na.rm = T),
            k_upr = quantile(k, prob = 0.95, na.rm = T)) |> 
  ungroup()

VBG_filter <- IVBG_filter |>
  group_by(cohort, area) |>
  summarize(k_mean = mean(k, na.rm = T),
            k_median = quantile(k, prob = 0.5, na.rm = T),
            k_lwr = quantile(k, prob = 0.05, na.rm = T),
            k_upr = quantile(k, prob = 0.95, na.rm = T)) |> 
  ungroup()

ggplot() +
  geom_ribbon(data = VBG, aes(cohort, k_median, ymin = k_lwr, ymax = k_upr,
                              fill = "All k's"), alpha = 0.4) +
  geom_ribbon(data = VBG_filter, aes(cohort, k_median, ymin = k_lwr, ymax = k_upr,
                                     fill = "Filtered"), alpha = 0.4) +
  geom_line(data = VBG, aes(cohort, k_median, color = "All k's")) + 
  geom_line(data = VBG_filter, aes(cohort, k_median, color = "Filtered")) + 
  guides(fill = "none") +
  facet_wrap(~area)

ggplot() +
  geom_line(data = VBG, aes(cohort, k_median, color = "All k's")) + 
  geom_line(data = VBG_filter, aes(cohort, k_median, color = "Filtered")) + 
  guides(fill = "none") +
  facet_wrap(~area)

# No difference at all really. We should probably just discuss that with this model, achieving biologically reasonable parameter values and a good fit to data are sometimes two different things. In our case, we just want a representative value of the growth (as in time to reach average maximum size in the population) that accounts for the entire growth trajectory of an individual, for each area and cohort.
```

BT 1996 has a very high k, so I'll inspect it in more detail

```{r}
#|cache: false

bt96 <- IVBG |> 
  filter(area == "BT" & cohort %in% c(1995, 1996, 1997, 1998))

ggplot(bt96, aes(as.factor(cohort), k)) + 
  geom_jitter(width = 0.2, height = 0) + 
  geom_boxplot(fill = NA, width = 0.2) + 
  geom_hline(yintercept = mean(filter(bt96, cohort == 1996)$k), linetype = 2)

# Check the fits in more detail
bt96b <- bt96 |> filter(cohort == 1996) |> as.data.frame()

t <- bt96b |> 
  filter(k_se < k) |>
  filter(linf_se < linf) |> 
  filter(linf_lwr > 0)

t

bt96 |> 
  filter(k_se < k) |>
  filter(linf_se < linf) |> 
  filter(linf_lwr > 0) |> 
  ggplot(aes(as.factor(cohort), k)) + 
  geom_jitter(width = 0.2, height = 0) + 
  geom_boxplot(fill = NA, width = 0.2) + 
  geom_hline(yintercept = mean(filter(bt96, cohort == 1996)$k), linetype = 2)

# Plot these individuals in t
t <- t |> 
  dplyr::select(-cohort) |> 
  left_join(d, by = "ID") |> 
  mutate(length_mm_pred = linf*(1-exp(-k*age_bc)))

ggplot(t, aes(as.factor(cohort), k)) + 
  geom_jitter(width = 0.2, height = 0) + 
  geom_boxplot(fill = NA, width = 0.2) + 
  geom_hline(yintercept = mean(t$k), linetype = 2)

ggplot(t, aes(age_bc, length_mm)) +
  geom_jitter(width = 0.3) +
  geom_line(aes(age_bc, length_mm_pred)) +
  facet_wrap(~ID)

# These fits look totally reasonable
```

## Add GAM-predicted temperature to growth models

```{r}
#| cache: false
pred_temp <- read_csv(paste0(home, "/output/gam_predicted_temps.csv")) |> 
  rename(cohort = year)

VBG <- VBG |>
  left_join(pred_temp, by = c("area", "cohort"))

# Save data for map-plot
cohort_sample_size <- IVBG |>
  group_by(area, cohort) |> 
  summarise(n = n()) # individuals, not samples!
  
VBG <- left_join(VBG, cohort_sample_size, by = c("cohort", "area"))

write_csv(VBG, paste0(home, "/output/vbg.csv"))

# Calculate the plotting order (also used for map plot)
order <- VBG |>
  ungroup() |>
  group_by(area) |>
  summarise(min_temp = min(temp)) |>
  arrange(desc(min_temp))

order

nareas <- length(unique(order$area)) + 2 # to skip the brightest colors
colors <- colorRampPalette(brewer.pal(name = "RdYlBu", n = 10))(nareas)[-c(7,8)]
```

## Plot VBGE fits

```{r}
# Sample 50 IDs per area and plot their data and VBGE fits
set.seed(4)
ids <- IVBG |> distinct(ID, .keep_all = TRUE) |> group_by(area) |> slice_sample(n = 30)
#ids |> ungroup() |> group_by(area) |> summarise(n = length(unique(ID))) |> arrange(n)

IVBG2 <- IVBG |>
  filter(ID %in% ids$ID) |> 
  distinct(ID, .keep_all = TRUE) |> 
  select(ID, k, linf)
 
d2 <- d |>
  ungroup() |>
  filter(ID %in% ids$ID) |>
  left_join(IVBG2, by = "ID") |>
  mutate(length_mm_pred = linf*(1-exp(-k*age_bc)))
 
ggplot(d2, aes(age_bc, length_mm, group = ID, color = ID)) +
  geom_jitter(width = 0.3, height = 0, alpha = 0.5, size = 0.4) +
  geom_line(aes(age_bc, length_mm_pred, group = ID, color = ID),
            inherit.aes = FALSE, alpha = 0.8, linewidth = 0.3) + 
  guides(color = "none") +
  scale_color_viridis(discrete = TRUE, name = "Area", option = "cividis") +
  labs(x = "Age (yrs)", y = "Length (mm)") +
  facet_wrap(~factor(area, levels = (arrange(area_attr, desc(lat)))$area), ncol = 3)

ggsave(paste0(home, "/figures/vb_fits.pdf" ), width = 17, height = 17, units = "cm")

# rugs <- IVBG |> 
#   group_by(area) |> 
#   summarise(median_k = median(k),
#             median_linf = median(linf))

# k <- IVBG |> 
#   ggplot(aes(k, color = factor(area, order$area))) + 
#   geom_density(alpha = 0.4, fill = NA, adjust = 1.5) +  
#   scale_color_manual(values = colors, name = "Area") +
#   coord_cartesian(expand = 0) + 
#   labs(x = expression(italic(k))) +
#   geom_rug(data = rugs, aes(median_k)) +
#   theme(legend.position = c(0.9, 0.5))

# violons instead?
k2 <- IVBG |> 
  ggplot(aes(factor(area, order$area), k, fill = factor(area, order$area))) + 
  geom_violin(alpha = 0.6, color = NA) +  
  geom_boxplot(outlier.color = NA, width = 0.2, alpha = 0.8, fill = NA, size = 0.4) +
  # geom_jitter(data = IVBG |> group_by(area) |> slice_sample(n = 100),
  #             aes(factor(area, order$area), k), height = 0, width = 0.2, alpha = 0.1,
  #             color = "grey40") +
  scale_fill_manual(values = colors, name = "Area") +
  guides(fill = "none", color = "none") +
  labs(x = "", y = expression(italic(k)))

k2

# linf <- IVBG |> 
#   ggplot(aes(linf, color = factor(area, order$area))) + 
#   geom_density(alpha = 0.4, fill = NA, adjust = 1.5) +  
#   scale_color_manual(values = colors, name = "Area") +
#   coord_cartesian(expand = 0, xlim = c(0, 2000)) + 
#   labs(x = expression(paste(italic(L[infinity]), " [cm]"))) +
#   geom_rug(data = rugs, aes(median_linf)) +
#   guides(color = "none")

linf2 <- IVBG |> 
  # group_by(area) |> 
  # mutate(upr = quantile(linf, probs = 0.95)) |> 
  # ungroup() |> 
  # filter(linf < upr) |> 
  ggplot(aes(factor(area, order$area), linf, fill = factor(area, order$area))) + 
  geom_violin(alpha = 0.6, color = NA) +  
  geom_boxplot(outlier.color = NA, width = 0.1, alpha = 0.8, fill = NA, size = 0.4) +
  coord_cartesian(ylim = c(0, 2300)) +
  # geom_jitter(data = IVBG |> group_by(area) |> slice_sample(n = 100),
  #             aes(factor(area, order$area), linf), height = 0, width = 0.2, alpha = 0.1,
  #             color = "grey40") +
  scale_fill_manual(values = colors, name = "Area") +
  guides(fill = "none", color = "none") +
  labs(x = "", y = expression(paste(italic(L[infinity]), " [cm]")))

linf2

#k / linf
k2 / linf2

ggsave(paste0(home, "/figures/vb_pars.pdf" ), width = 17, height = 17, units = "cm")
```

## Fit Sharpe-Schoolfield model to K

By area

```{r}
model <- 'sharpeschoolhigh_1981'

# Get starting values on full dataset for Sharpe-Schoolfield model
dat <- VBG |>
  select(k_median, temp, area) |>
  rename(rate = k_median)

lower <- get_lower_lims(dat$temp, dat$rate, model_name = model)
upper <- get_upper_lims(dat$temp, dat$rate, model_name = model)
start <- get_start_vals(dat$temp, dat$rate, model_name = model)
  
# Sharpe-Schoolfield model fit to data for each area
preds <- NULL
pred <- NULL
pars <- list()

for(a in unique(dat$area)) {
  
  # Get data
  dd <- dat |> filter(area == a)
  
  # Fit model
  fit <- nls_multstart(
    rate ~ sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th, tref = 8),
    data = dd,
    iter = c(3, 3, 3, 3),
    start_lower = start*0.5,
    start_upper = start*2,
    lower = lower,
    upper = upper,
    supp_errors = 'Y'
    )
  
  # Make predictions on new data
  new_data <- data.frame(temp = seq(min(dd$temp), max(dd$temp), length.out = 100))
  
  pred <- augment(fit, newdata = new_data) |> mutate(area = a)
  
  # Add to general data frame
  preds <- data.frame(rbind(preds, pred))
  
  # Add parameter estimates
  pars[[a]] <- summary(fit)$coefficients |>
    as.data.frame() |>
    rownames_to_column(var = "parameter") |>
    mutate(area = a)
  
}

# For comparison with the bayesian model below
nls_pars <- bind_rows(pars)

nls_pars <- nls_pars |> 
  mutate(upr = Estimate + 1.96 *`Std. Error`,
         lwr = Estimate - 1.96 *`Std. Error`) |> 
  dplyr::select(parameter, Estimate, upr, lwr, area) |> 
  mutate(source = "nls")

```

All areas pooled

```{r}
# One sharpe schoolfield fitted to all data
fit_all <- nls_multstart(
    rate ~ sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th, tref = 8),
    data = dat,
    iter = c(3, 3, 3, 3),
    start_lower = start*0.5,
    start_upper = start*2,
    lower = lower,
    upper = upper,
    supp_errors = 'Y'
    )

# Make predictions on new data
new_data_all <- data.frame(temp = seq(min(dat$temp), max(dat$temp), length.out = 100))

pred_all <- augment(fit_all, newdata = new_data_all) |> 
  mutate(area = "all")

# Add t_opt (not correct equation I think!) from Padfield 2021 ISME
kb <- 8.62e-05
# data.frame(par = names(coef(fit_all)), est = coef(fit_all)) |> 
#   pivot_wider(names_from = par, values_from = est) |> 
#   summarise(t_opt = (eh*th) / (eh + kb*th*log((eh/e)-1)))
# 
# get_topt

# This rTPC function just finds the temperature where the function is maximized,
# do that also for brms fits
get_topt(fit_all)
```

Plot Sharpe Schoolfield fits

```{r}
# Plot growth coefficients by year and area against mean SST

p1 <- preds |>
  ggplot(aes(temp, .fitted, color = factor(area, order$area))) + 
  geom_point(data = dat, aes(temp, rate, color = factor(area, order$area)), size = 1, alpha = 0.8) +
  geom_line(linewidth = 1) +
  geom_line(data = pred_all, aes(temp, .fitted), linewidth = 1, inherit.aes = FALSE, linetype = 2) +
  scale_color_manual(values = colors, name = "Area") +
  guides(color = guide_legend(nrow = 1, reverse = TRUE, title.position = "top", title.hjust = 0.5,
                              override.aes = list(size = 1))) +
  scale_x_continuous(breaks = seq(-5, 20, 1)) +
  labs(x = "Temperature (Â°C)",
       y = "von Bertalanffy growth coefficient (*k*)") +
  theme(axis.title.y = ggtext::element_markdown(),
        legend.position = "bottom",
        legend.direction = "horizontal")

p1 + facet_wrap(~factor(area, levels = (arrange(area_attr, desc(lat)))$area))
  
p1

ggsave(paste0(home, "/figures/sharpe_school.pdf" ), width = 17, height = 17, units = "cm")
```

## Can we fit a single Sharpe Schoolfield with area-specific parameters with `brms`?

```{r}
# Again, here are the data we are fitting:
ggplot(dat, aes(temp, rate, color = factor(area, order$area))) + 
  geom_point(data = dat, aes(temp, rate, color = factor(area, order$area)), size = 0.6)  

# Which family to use? Well we can try with a Gaussian or a student-t first... 
# After that, maybe gamma or lognormal, if we predict negative K's
hist(dat$rate)

# Here's the equation:
sharpeschoolhigh_1981

# Add in fixed parameters
dat$bk <- 8.62e-05
dat$tref <- 8 + 273.15

# We can use the nls() parameters as starting values
nlspars <- summary(fit_all)$coefficients[, 1]
summary(fit_all)
# Parameters:
#        Estimate Std. Error t value Pr(>|t|)  
# r_tref   0.5265     0.5818   0.905   0.3661  
# e        1.3179     1.1940   1.104   0.2705  
# eh       1.8364     0.7329   2.506   0.0127 *
# th       6.5328     6.1852   1.056   0.2916  

# As a first guess, I use the nls estimate as the mean, and standard deviation something close to it. We can also bound som fo them by 0, since negative values shouldn't be possible
# (better visualization including bounds further down)
n=10000
hist(rnorm(0.5, 2.5, n=n), main = "rtref")
hist(rnorm(1, 2.5, n=n), main = "e") 
hist(rnorm(2, 2.5, n=n), main = "eh")
hist(rnorm(6, 5, n=n), main = "hh")

fit_prior <- brm(
  bf(rate ~ (rtref * exp(e/bk * (1/tref - 1/(temp + 273.15)))) / (1 + exp(eh/bk * (1/(th + 273.15) - 1/(temp + 273.15)))),
     rtref + e + eh + th ~ 1, 
     nl = TRUE),
  data = dat,
  cores = 2,
  chains = 2,
  iter = 1500,
  sample_prior = "only",
  seed = 9,
  prior = c(
    prior(normal(0.5, 2.5), nlpar = "rtref", lb = 0),
    prior(normal(1, 2.5), nlpar = "e", lb = 0),
    prior(normal(2, 2.5), nlpar = "eh", lb = 0),
    prior(normal(6, 5), nlpar = "th", lb = 0)
  )
)

# Global prior predictive check in relation to data. Doesn't loo too informative...
dat |>
  data_grid(temp = seq_range(temp, n = 51)) |> 
  ungroup() |> 
  mutate(bk = 8.62e-05,
         tref = 8 + 273.15) |> 
  add_epred_draws(fit_prior) |> 
  mutate(rtref = nlspars[1], e = nlspars[2], eh = nlspars[3], th = nlspars[4]) |> 
  mutate(man_pred = (rtref * exp(e/bk * (1/tref - 1/(temp + 273.15)))) / (1 + exp(eh/bk * (1/(th + 273.15) - 1/(temp + 273.15))))) |> 
  ggplot(aes(temp, y = .epred)) +
  stat_lineribbon(.width = c(0.95), alpha = 0.3, color = "black", fill = "black") + 
  geom_line(aes(y = man_pred), color = "tomato3", linetype = 2) + 
  geom_point(data = dat, aes(temp, rate, color = factor(area, order$area)), size = 0.6) +
  scale_color_manual(values = colors, name = "Area") +
  coord_cartesian(ylim = c(0, 10)) + # Extends waaaay higher... 
  NULL

# Now make sure it converges with real data but no random effects
fit_global <- brm(
  bf(rate ~ (rtref * exp(e/bk * (1/tref - 1/(temp + 273.15)))) / (1 + exp(eh/bk * (1/(th + 273.15) - 1/(temp + 273.15)))),
     rtref + e + eh + th ~ 1,
     nl = TRUE),
  data = dat,
  cores = 4,
  chains = 4,
  iter = 4000, 
  seed = 9,
  sample_prior = "yes",
  prior = c(
    prior(normal(0.5, 2.5), nlpar = "rtref", lb = 0),
    prior(normal(1, 2.5), nlpar = "e", lb = 0),
    prior(normal(2, 2.5), nlpar = "eh", lb = 0),
    prior(normal(6, 5), nlpar = "th", lb = 0)
  ),
  control = list(adapt_delta = 0.99, max_treedepth = 12)
)

plot(fit_global)
pp_check(fit_global)
plot(conditional_effects(fit_global, effect = "temp"), points = TRUE)

dat |>
  data_grid(temp = seq_range(temp, n = 51)) |> 
  ungroup() |> 
  mutate(bk = 8.62e-05,
         tref = 8 + 273.15) |> 
  add_epred_draws(fit_global) |> 
  mutate(rtref = nlspars[1], e = nlspars[2], eh = nlspars[3], th = nlspars[4]) |> # from summary(fit_all)
  mutate(man_pred = (rtref * exp(e/bk * (1/tref - 1/(temp + 273.15)))) / (1 + exp(eh/bk * (1/(th + 273.15) - 1/(temp + 273.15))))) |> 
  ggplot(aes(temp, y = .epred)) +
  stat_lineribbon(.width = c(0.95), alpha = 0.3, color = "black", fill = "black") + 
  geom_line(aes(y = man_pred), color = "tomato3", linetype = 2) + 
  geom_point(data = dat, aes(temp, rate, color = factor(area, order$area)), size = 0.6) +
  scale_color_manual(values = colors, name = "Area")

# Plot prior vs posterior
post <- fit_global |>
  as_draws_df() |>
  dplyr::select(b_rtref_Intercept, b_e_Intercept, b_eh_Intercept, b_th_Intercept) |> 
  rename(rtref = b_rtref_Intercept, 
         e = b_e_Intercept,
         eh = b_eh_Intercept,
         th = b_th_Intercept) |> 
  pivot_longer(everything(), names_to = "parameter") |> 
  mutate(type = "Posterior")

prior <- fit_global |>
  as_draws_df() |>
  dplyr::select(prior_b_rtref, prior_b_e, prior_b_eh, prior_b_th) |> 
    rename(rtref = prior_b_rtref, 
         e = prior_b_e,
         eh = prior_b_eh,
         th = prior_b_th) |> 
  pivot_longer(everything(), names_to = "parameter") |> 
  mutate(type = "Prior")

dist <- bind_rows(prior, post)

ggplot(dist, aes(value, fill = type)) +
  geom_density(color = NA, alpha = 0.5) +
  scale_fill_brewer(palette = "Set1") +
  facet_wrap(~parameter, scales = "free") + 
  theme(legend.position = c(0.35, 0.9)) +
  labs(fill = "")
```

Ok, seems to work with priors and everything. They are roughly as broad as can be and still have a fit. Now fit the full model, with random area effects, more iterations and chains!

```{r}
# Still good enough, might change some priors. Now look at random area effects!
# Gaussian model
fitb <- brm(
  bf(rate ~ (rtref * exp(e/bk * (1/tref - 1/(temp + 273.15)))) / (1 + exp(eh/bk * (1/(th + 273.15) - 1/(temp + 273.15)))),
     rtref + e + eh + th ~ 1 + (1|area),
     nl = TRUE),
  data = dat,
  cores = 4,
  chains = 4,
  iter = 5000,
  sample_prior = "yes",
  save_pars = save_pars(all = TRUE),
  seed = 9,
  prior = c(
    prior(normal(0.5, 2.5), nlpar = "rtref", lb = 0),
    prior(normal(1, 2.5), nlpar = "e", lb = 0),
    prior(normal(2, 2.5), nlpar = "eh", lb = 0),
    prior(normal(6, 5), nlpar = "th", lb = 0)
  ),
  control = list(adapt_delta = 0.99, max_treedepth = 12)
)

# Student-t model
fitbs <- brm(
  bf(rate ~ (rtref * exp(e/bk * (1/tref - 1/(temp + 273.15)))) / (1 + exp(eh/bk * (1/(th + 273.15) - 1/(temp + 273.15)))),
     rtref + e + eh + th ~ 1 + (1|area),
     nl = TRUE),
  data = dat,
  family = student,
  cores = 4,
  chains = 4,
  iter = 5000,
  sample_prior = "yes",
  save_pars = save_pars(all = TRUE),
  seed = 9,
  prior = c(
    prior(normal(0.5, 2.5), nlpar = "rtref", lb = 0),
    prior(normal(1, 2.5), nlpar = "e", lb = 0),
    prior(normal(2, 2.5), nlpar = "eh", lb = 0),
    prior(normal(6, 5), nlpar = "th", lb = 0)
  ),
  control = list(adapt_delta = 0.99, max_treedepth = 12)
)
```

Compare fitted models based on ELPD. Preferred model in the first row!

```{r}
fitb_loo <- loo(fitb, moment_match = TRUE)
fitbs_loo <- loo(fitbs, moment_match = TRUE)

loo_compare(fitb_loo, fitbs_loo)
```

The student model is preferred. Inspect it!

```{r}
# Check fit
summary(fitbs)

plot(fitbs)

pp_check(fitbs)

ggsave(paste0(home, "/figures/supp/sharpe_brms_ppcheck.pdf" ), width = 11, height = 11, units = "cm")

# Plot prior vs posterior
post <- fitbs |>
  as_draws_df() |>
  dplyr::select(b_rtref_Intercept, b_e_Intercept, b_eh_Intercept, b_th_Intercept) |> 
  rename(rtref = b_rtref_Intercept, 
         e = b_e_Intercept,
         eh = b_eh_Intercept,
         th = b_th_Intercept) |> 
  pivot_longer(everything(), names_to = "parameter") |> 
  mutate(type = "Posterior")

prior <- fitbs |>
  as_draws_df() |>
  dplyr::select(prior_b_rtref, prior_b_e, prior_b_eh, prior_b_th) |> 
    rename(rtref = prior_b_rtref, 
         e = prior_b_e,
         eh = prior_b_eh,
         th = prior_b_th) |> 
  pivot_longer(everything(), names_to = "parameter") |> 
  mutate(type = "Prior")

dist <- bind_rows(prior, post)

ggplot(dist, aes(value, fill = type)) +
  geom_density(color = NA, alpha = 0.5) +
  scale_fill_brewer(palette = "Set1") +
  facet_wrap(~parameter, scales = "free") + 
  theme(legend.position = c(0.35, 0.9)) +
  labs(fill = "")

ggsave(paste0(home, "/figures/supp/sharpe_brms_prior.pdf" ), width = 17, height = 17, units = "cm")

# Calculate T_opt
ts <- dat |> 
  data_grid(temp = seq_range(temp, n = 100)) |> 
  mutate(bk = 8.62e-05,
         tref = 8 + 273.15) |> 
  add_epred_draws(fitbs, re_formula = NA, ndraws = 10000) 

ggplot(ts) + 
  geom_line(aes(temp, y = .epred, group = .draw), alpha = .1)

# Compute quantiles across spaghetties
t_opt <- ts |> 
  group_by(.draw) |> 
  filter(.epred == max(.epred)) |> 
  ungroup()

ggplot(t_opt, aes(temp)) + 
  geom_histogram()

quantile(t_opt$temp, probs = c(0.025, 0.5, 0.975))

# Make the main plot (conditional effect of temperature, with and without random effects)
# Predictions without random effects
glob <- dat |>
  data_grid(temp = seq_range(temp, n = 100)) |> 
  mutate(bk = 8.62e-05,
         tref = 8 + 273.15) |> 
  add_epred_draws(fitbs, re_formula = NA) |> 
  ungroup()

dat |>
  group_by(area) |>
  data_grid(temp = seq_range(temp, n = 100)) |> 
  ungroup() |> 
  mutate(bk = 8.62e-05,
         tref = 8 + 273.15) |> 
  add_epred_draws(fitbs) |> 
  ungroup() |> 
  ggplot(aes(temp, y = .epred, color = factor(area, order$area))) +
  stat_lineribbon(data = glob, aes(temp, .epred), .width = c(0.9), inherit.aes = FALSE,
                  fill = "black", color = "black", alpha = 0.1) +
  geom_point(data = dat, aes(temp, rate, color = factor(area, order$area)), size = 1, alpha = 0.8) +
  stat_lineribbon(.width = c(0)) +
  stat_lineribbon(data = glob, aes(temp, .epred), .width = c(0), inherit.aes = FALSE,
                  color = "black", alpha = 0.9, linetype = 2) +
  # trimming the y-axis a bit... highest k is 0.53, second highest is 0.37
  coord_cartesian(ylim = c(min(dat$rate) - 0.01, sort(dat$rate)[length(dat$rate) - 1] + 0.01)) +
  scale_color_manual(values = colors, name = "Area") +
  guides(fill = "none",
         color = guide_legend(nrow = 1, reverse = TRUE, title.position = "top", title.hjust = 0.5,
                              override.aes = list(size = 1))) +
  theme(axis.title.y = ggtext::element_markdown(),
        legend.position = "bottom",
        legend.direction = "horizontal") +
  labs(x = "Temperature (Â°C)",
       y = "von Bertalanffy growth coefficient (*k*)")
  
ggsave(paste0(home, "/figures/sharpe_school_bayes.pdf" ), width = 17, height = 17, units = "cm")
```

Now plot comparisons with the nls multstart fits

```{r}
# Compare with area-specific sharpe scool!
area_pred_brms <- dat |>
  group_by(area) |> 
  data_grid(temp = seq_range(temp, n = 100)) |> 
  ungroup() |> 
  mutate(bk = 8.62e-05,
         tref = 8 + 273.15) |> 
  add_epred_draws(fitbs)

# Plot area specific in comparison with nls multstart
p1 <- ggplot(area_pred_brms, aes(temp, y = .epred, color = factor(area, order$area),
                           fill = factor(area, order$area))) +
  stat_lineribbon(.width = c(0.95), alpha = 0.4, color = NA) +
  stat_lineribbon(.width = c(0)) + 
  geom_point(data = dat, aes(temp, rate, color = factor(area, order$area)), size = 0.6) +
  scale_color_manual(values = colors, name = "Area") +
  scale_fill_manual(values = colors, name = "Area") +
  scale_linetype_manual(values = 2) +
  facet_wrap(~factor(area, rev(order$area))) +
  guides(fill = "none",
         color = guide_legend(nrow = 1, reverse = TRUE, title.position = "top", title.hjust = 0.5,
                              override.aes = list(size = 1))) +
  theme(axis.title.y = ggtext::element_markdown(),
        legend.position = "bottom",
        legend.direction = "horizontal") +
  labs(x = "Temperature (Â°C)",
       y = "von Bertalanffy growth coefficient (*k*)",
       linetype = "")

p1

ggsave(paste0(home, "/figures/supp/sharpe_school_bayes_ci_facet.pdf" ), width = 17, height = 17, units = "cm")

# Now compare to nls fits
p1 + geom_line(data = preds, aes(temp, .fitted, linetype = "nls multstart"), color = "gray10")

# And for the population-level prediction
nd_brms <- dat |>
  data_grid(temp = seq_range(temp, n = 100)) |> 
  ungroup() |> 
  mutate(bk = 8.62e-05,
         tref = 8 + 273.15)

pred_brms <- predict(fitbs, newdata = nd_brms, re_formula = NA) |> as.data.frame()
nd_brms$pred_pop <- pred_brms$Estimate

# (why not also comparing the global brms model...)
pred_brms_global <- predict(fit_global, newdata = nd_brms) |> as.data.frame()
nd_brms$pred_glob <- pred_brms_global$Estimate

ggplot(nd_brms, aes(temp, y = pred_pop, color = "mixed brms model")) +
  geom_point(data = dat, aes(temp, rate), size = 0.6, color = "grey30") +
  geom_line() + 
  geom_line(data = pred_all, aes(temp, .fitted, color = "nls"), linewidth = 1, inherit.aes = FALSE) +
  geom_line(data = nd_brms, aes(temp, pred_glob, color = "global brms model"), linewidth = 1, inherit.aes = FALSE) +
  guides(fill = "none",
         color = guide_legend(ncol = 1, reverse = TRUE, title.position = "top", title.hjust = 0.5,
                              override.aes = list(size = 1)),
         linetype = guide_legend(keywidth = unit(1, "cm"))) +
  theme(axis.title.y = ggtext::element_markdown()) +
  labs(x = "Temperature (Â°C)",
       y = "von Bertalanffy growth coefficient (*k*)",
       color = "")
```

And a comparison of parameter estimates...

```{r}

get_variables(fitbs)
summary(fitbs)

pop_pars <- summary(fitbs)$fixed |> 
  as.data.frame() |> 
  rownames_to_column(var = "parameter") |> 
  mutate(parameter = str_remove(parameter, "_Intercept"),
         parameter = ifelse(parameter == "rtref", "r_tref", parameter)) |> 
  rename(pop_Estimate = Estimate) |> 
  dplyr::select(parameter, pop_Estimate)

pop_pars <- fitbs |> 
  gather_draws(b_rtref_Intercept,
               b_e_Intercept,
               b_eh_Intercept,
               b_th_Intercept) |> 
  rename(parameter = .variable) |> 
  mutate(parameter = str_remove(parameter, "b_"),
         parameter = str_remove(parameter, "_Intercept"),
         parameter = ifelse(parameter == "rtref", "r_tref", parameter)) |> 
  rename(.pop_value = .value )

brms_pars <- fitbs |> 
  gather_draws(r_area__rtref[area, Intercept],
               r_area__e[area, Intercept],
               r_area__eh[area, Intercept],
               r_area__th[area, Intercept]) |> 
  rename(parameter = .variable) |> 
  mutate(parameter = str_remove(parameter, "r_area__"),
         parameter = ifelse(parameter == "rtref", "r_tref", parameter)) |> 
  dplyr::select(-Intercept) |>
  left_join(pop_pars, by = c(".chain", ".iteration", ".draw", "parameter")) |> 
  mutate(.value = .pop_value + .value) |> 
  summarise(Estimate = median(.value),
            lwr = quantile(.value, probs = 0.025),
            upr = quantile(.value, probs = 0.975)) |> 
  ungroup() |> 
  mutate(source = "brms")
  
pars <- bind_rows(brms_pars, nls_pars)

# Need to trim errorbars...
ggplot(pars, aes(area, Estimate, color = source)) + 
  geom_point() +
  geom_errorbar(aes(ymin = lwr, ymax = upr), width = 0) + 
  facet_wrap(~parameter, scales = "free")

pars |> 
  ggplot(aes(area, Estimate, color = source)) + 
  geom_point(position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(ymin = lwr, ymax = upr), width = 0,
                position = position_dodge(width = 0.5)) + 
  coord_cartesian(ylim = c(-3, 20)) + 
  facet_wrap(~parameter, scales = "free")

# And without errorbars...
pars |> 
  ggplot(aes(area, Estimate, color = source)) + 
  geom_point(position = position_dodge(width = 0.5)) +
  facet_wrap(~parameter, scales = "free")

pars |> as.data.frame()
```




## Extra analysis

```{r}
knitr::knit_exit()
```

### Temperature in growing season instead of all year average
#### Fit Sharpe-Schoolfield model to K
By area

```{r}
#| eval: false
model <- 'sharpeschoolhigh_1981'

# Get starting values on full dataset for Sharpe-Schoolfield model
dat2 <- VBG |>
  select(k_median, temp_gs, area) |>
  rename(rate = k_median,
         temp = temp_gs) # growing season! not annual average!

lower <- get_lower_lims(dat2$temp, dat2$rate, model_name = model)
upper <- get_upper_lims(dat2$temp, dat2$rate, model_name = model)
start <- get_start_vals(dat2$temp, dat2$rate, model_name = model)
  
# Sharpe-Schoolfield model fit to data for each area
preds2 <- NULL
pred2 <- NULL

for(a in unique(dat2$area)) {
  
  # Get data
  dd <- dat2 |> filter(area == a)
  
  # Fit model
  fit2 <- nls_multstart(
    rate ~ sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th, tref = 8),
    data = dd,
    iter = c(3, 3, 3, 3),
    start_lower = start*0.5,
    start_upper = start*2,
    lower = lower,
    upper = upper,
    supp_errors = 'Y'
    )
  
  # Make predictions on new data
  new_data2 <- data.frame(temp = seq(min(dd$temp), max(dd$temp), length.out = 100))
  
  pred2 <- augment(fit2, newdata = new_data2) |> mutate(area = a)
  
  # Add to general data frame
  preds2 <- data.frame(rbind(preds2, pred2))
  
}
```

All areas pooled

```{r}
#| eval: false
# One sharpe schoolfield fitted to all data
fit_all2 <- nls_multstart(
    rate ~ sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th, tref = 8),
    data = dat2,
    iter = c(3, 3, 3, 3),
    start_lower = start*0.5,
    start_upper = start*2,
    lower = lower,
    upper = upper,
    supp_errors = 'Y'
    )

# Make predictions on new data
new_data_all2 <- data.frame(temp = seq(min(dat2$temp), max(dat2$temp), length.out = 100))

pred_all2 <- augment(fit_all2, newdata = new_data_all2) |> 
  mutate(area = "all")

# Add t_opt
kb <- 8.62e-05
data.frame(par = names(coef(fit_all2)), est = coef(fit_all2)) |> 
  pivot_wider(names_from = par, values_from = est) |> 
  summarise(t_opt = (eh*th) / (eh + kb*th*log((eh/e)-1)))
```

## Plot Sharpe Schoolfield fits

```{r}
#| eval: false

# Plot growth coefficients by year and area against mean SST
preds2 |>
  ggplot(aes(temp, .fitted, color = factor(area, order$area))) + 
  geom_point(data = dat2, aes(temp, rate, color = factor(area, order$area)), size = 0.6) +
  geom_line(linewidth = 1) +
  geom_line(data = pred_all2, aes(temp, .fitted), linewidth = 1, inherit.aes = FALSE, linetype = 2) +
  scale_color_manual(values = colors, name = "Area") +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  scale_x_continuous(breaks = seq(-5, 20, 1)) +
  labs(x = "Temperature (Â°C)",
       y = "von Bertalanffy growth coefficient (*k*)") +
  theme(axis.title.y = ggtext::element_markdown())
```

### Linf instead of k
By area

```{r}
#| eval: false

model <- 'sharpeschoolhigh_1981'

# Get starting values on full dataset for Sharpe-Schoolfield model
dat3 <- VBG |>
  select(linf_median, temp, area) |>
  rename(rate = linf_median)

lower <- get_lower_lims(dat3$temp, dat3$rate, model_name = model)
upper <- get_upper_lims(dat3$temp, dat3$rate, model_name = model)
start <- get_start_vals(dat3$temp, dat3$rate, model_name = model)
  
# Sharpe-Schoolfield model fit to data for each area
preds3 <- NULL
pred3 <- NULL

for(a in unique(dat3$area)) {
  
  # Get data
  dd <- dat3 |> filter(area == a)
  
  # Fit model
  fit3 <- nls_multstart(
    rate ~ sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th, tref = 8),
    data = dd,
    iter = c(3, 3, 3, 3),
    start_lower = start*0.5,
    start_upper = start*2,
    lower = lower,
    upper = upper,
    supp_errors = 'Y'
    )
  
  # Make predictions on new data
  new_data3 <- data.frame(temp = seq(min(dd$temp), max(dd$temp), length.out = 100))
  
  pred3 <- augment(fit3, newdata = new_data3) |> mutate(area = a)
  
  # Add to general data frame
  preds3 <- data.frame(rbind(preds3, pred3))
  
}
```

All areas pooled

```{r}
#| eval: false


# One sharpe schoolfield fitted to all data
fit_all3 <- nls_multstart(
    rate ~ sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th, tref = 8),
    data = dat3,
    iter = c(3, 3, 3, 3),
    start_lower = start*0.5,
    start_upper = start*2,
    lower = lower,
    upper = upper,
    supp_errors = 'Y'
    )

# Make predictions on new data
new_data_all3 <- data.frame(temp = seq(min(dat3$temp), max(dat3$temp), length.out = 100))

pred_all3 <- augment(fit_all3, newdata = new_data_all3) |> 
  mutate(area = "all")
```

## Plot Sharpe Schoolfield fits

```{r}
#| eval: false

# Plot growth coefficients by year and area against mean SST
preds3 |>
  ggplot(aes(temp, .fitted, color = factor(area, order$area))) + 
  geom_point(data = dat3, aes(temp, rate, color = factor(area, order$area)), size = 0.6) +
  geom_line(linewidth = 1) +
  geom_line(data = pred_all3, aes(temp, .fitted), linewidth = 1, inherit.aes = FALSE, linetype = 2) +
  scale_color_manual(values = colors, name = "Area") +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  scale_x_continuous(breaks = seq(-5, 20, 1)) +
  labs(x = "Temperature (Â°C)",
       y = expression(paste(italic(L[infinity]), " [cm]"))) +
  theme(axis.title.y = ggtext::element_markdown())
```

```{r}
#| eval: false

ggplot(VBG, aes(linf_median, k_median)) + 
  geom_point()
```

