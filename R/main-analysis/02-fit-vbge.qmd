---
title: "Fit VBGE models to back-calculated length-at-age"
author: "Max Lindmark, Jan Ohlberger, Anna GÃ¥rdmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 80%
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Load libraries

```{r}
#| cache: false
#| message: false
#| warning: false
library(tidyverse)
library(tidylog)
library(broom)
library(RColorBrewer)
library(viridis)
library(minpack.lm)
library(patchwork)
library(ggtext)
library(brms)
library(modelr)
library(tidybayes)
library(ggridges)
library(performance)

# devtools::install_github("seananderson/ggsidekick") ## not on CRAN 
library(ggsidekick); theme_set(theme_sleek())

# Load functions
home <- here::here()
fxn <- list.files(paste0(home, "/R/functions"))
invisible(sapply(FUN = source, paste0(home, "/R/functions/", fxn)))
```

Load cache

```{r}
# qwraps2::lazyload_cache_dir(path = paste0(home, "/R/analyze-data/02-fit-vbge_cache/html"))
```

## Read and trim data

```{r}
#| cache: false
d <- #read_csv(paste0(home, "/data/for-analysis/dat.csv")) %>% 
  read_csv("https://raw.githubusercontent.com/maxlindmark/perch-growth/master/data/for-analysis/dat.csv") %>% 
  filter(age_ring == "Y", # use only length-at-age by filtering on age_ring
         !area %in% c("VN", "TH")) 

# Minimum number of observations per area and cohort
d$area_cohort <- as.factor(paste(d$area, d$cohort))

d <- d %>%
  group_by(area_cohort) %>% 
  filter(n() > 100) %>% 
  ungroup()

# Minimum number of observations per area, cohort, and age
d$area_cohort_age <- as.factor(paste(d$area, d$cohort, d$age_bc))

d <- d %>%
  group_by(area_cohort_age) %>% 
  filter(n() > 10) %>% 
  ungroup()

# Minimum number of cohorts in a given area
cnt <- d %>%
  group_by(area) %>%
  summarise(n = n_distinct(cohort)) %>%
  filter(n >= 10)

d <- d[d$area %in% cnt$area, ]

# Plot cleaned data
ggplot(d, aes(age_bc, length_mm)) +
  geom_jitter(size = 0.1, height = 0, alpha = 0.1) +
  scale_x_continuous(breaks = seq(20)) +
  theme(axis.text.x = element_text(angle = 0)) +
  theme(axis.text = element_text(size = 12), axis.title = element_text(size = 15)) +
  labs(x = "Age", y = "Length (mm)") +
  guides(color = "none") + 
  facet_wrap(~area, scale = "free_x")

# Longitude and latitude attributes for each area
area <- c("BS", "BT", "FB", "FM", "HO", "JM", "MU", "RA", "SI_EK", "SI_HA", "TH")
nareas <- length(area)
lat <- c(60, 60.4, 60.3, 60.5, 63.7, 58, 59, 65.9, 57.3, 57.4, 56.1)
lon <- c(21.5, 18.1, 19.5, 18, 20.9, 16.8, 18.1, 22.3, 16.6, 16.7, 15.9)
area_attr <- data.frame(cbind(area = area, lat = lat, lon = lon)) %>%
  mutate_at(c("lat", "lon"), as.numeric)

```

## Fit VBGE models

```{r}
# Get individual growth parameters (functions: VBGF/Gompertz,nls_out,fit_nls)
IVBG <- d %>%
  group_by(ID) %>%
  summarize(nls_out(fit_nls(length_mm, age_bc, min_nage = 5, model = "VBGF"))) %>% 
  ungroup()
```

```{r}
# Test what's going on ... 

# expand_grid(k = c(0.1, 0.2),
#             linf = c(300, 400)) %>% 
#   crossing(age_bc = 1:100) %>% 
#   mutate(length_mm_pred = linf*(1-exp(-k*age_bc)),
#          group = paste0("k = ", k, " and Linf = ", linf)) %>% 
#   ggplot(aes(age_bc, length_mm_pred, color = group)) + 
#   geom_line()

```

```{r}
#| cache: false
IVBG <- IVBG %>% drop_na(k) # The NAs are because the model didn't converge or because they were below the threshold age

IVBG <- IVBG %>%
  mutate(k_lwr = k - 1.96*k_se,
         k_upr = k + 1.96*k_se,
         linf_lwr = linf - 1.96*linf_se,
         linf_upr = linf + 1.96*linf_se,
         A = k*linf*0.65,
         row_id = row_number())

# Add back cohort and area variables
IVBG <- IVBG %>% 
  left_join(d %>% select(ID, area_cohort)) %>% 
  separate(area_cohort, into = c("area", "cohort"), remove = TRUE, sep = " ") %>% 
  mutate(cohort = as.numeric(cohort))

# Compare how the means and quantiles differ depending on this filtering
IVBG_filter <- IVBG %>%
  filter(k_se < quantile(k_se, probs = 0.95))

# Summarize growth coefficients by cohort and area
VBG <- IVBG %>%
  filter(k_se < k) %>% # new!
  group_by(cohort, area) %>%
  summarize(k = quantile(k, prob = 0.5, na.rm = T),
            A = quantile(A, prob = 0.5, na.rm = T),
            linf = quantile(linf, prob = 0.5, na.rm = T),
            k_lwr = quantile(k, prob = 0.05, na.rm = T),
            k_upr = quantile(k, prob = 0.95, na.rm = T)) %>% 
  ungroup()
```

Calculate sample size

```{r}
sample_size <- IVBG %>%
  group_by(area) %>% 
  summarise(n_cohort = length(unique(cohort)),
            min_cohort = min(cohort),
            max_cohort = max(cohort),
            n_individuals = length(unique(ID)),
            n_data_points = n())

sample_size

sample_size %>%
  ungroup() %>%
  summarise(sum_ind = sum(n_individuals), sum_n = sum(n_data_points))

write_csv(sample_size, paste0(home, "/output/sample_size.csv"))
```

## Add GAM-predicted temperature to growth models

```{r}
#| cache: false
pred_temp <- read_csv(paste0(home, "/output/gam_predicted_temps.csv")) %>% 
  rename(cohort = year)

VBG <- VBG %>%
  left_join(pred_temp, by = c("area", "cohort"))

# Save data for map-plot
cohort_sample_size <- IVBG %>%
  group_by(area, cohort) %>% 
  summarise(n = n()) # individuals, not samples!
  
VBG <- left_join(VBG, cohort_sample_size, by = c("cohort", "area"))

write_csv(VBG, paste0(home, "/output/vbg.csv"))

# Calculate the plotting order (also used for map plot)
order <- VBG %>%
  ungroup() %>%
  group_by(area) %>%
  summarise(mean_temp = mean(temp)) %>%
  arrange(desc(mean_temp))

order

write_csv(order, paste0(home, "/output/ranked_temps.csv"))

nareas <- length(unique(order$area)) + 2 # to skip the brightest colors that are hard to read
colors <- colorRampPalette(brewer.pal(name = "RdYlBu", n = 10))(nareas)[-c(6,7)]
```

## Plot VBGE fits

```{r}
#| cache: false
# Sample 30 IDs per area and plot their data and VBGE fits
set.seed(4)
ids <- IVBG %>% distinct(ID, .keep_all = TRUE) %>% group_by(area) %>% slice_sample(n = 30)

IVBG2 <- IVBG %>%
  filter(ID %in% ids$ID) %>% 
  distinct(ID, .keep_all = TRUE) %>% 
  select(ID, k, linf)
 
d2 <- d %>%
  ungroup() %>%
  filter(ID %in% ids$ID) %>%
  left_join(IVBG2, by = "ID") %>%
  mutate(length_mm_pred = linf*(1-exp(-k*age_bc)))
 
fits_ind <- ggplot(d2, aes(age_bc, length_mm, group = ID, color = ID)) +
  geom_jitter(width = 0.3, height = 0, alpha = 0.5, size = 0.4) +
  geom_line(aes(age_bc, length_mm_pred, group = ID, color = ID),
            inherit.aes = FALSE, alpha = 0.8, linewidth = 0.3) + 
  guides(color = "none") +
  scale_color_viridis(discrete = TRUE, name = "Site", option = "cividis") +
  scale_x_continuous(breaks = seq(1, 20, by = 2)) + 
  labs(x = "Age (years)", y = "Length (mm)") +
  facet_wrap(~factor(area, levels = (arrange(area_attr, desc(lat)))$area), ncol = 5)

A <- IVBG %>% 
  ggplot(aes(factor(area, order$area), A, fill = factor(area, order$area))) + 
  coord_cartesian(ylim = c(22, 90)) +
  geom_violin(alpha = 0.8, color = NA) +
  geom_boxplot(outlier.color = NA, width = 0.2, alpha = 0.9, fill = NA, size = 0.4) +
  scale_fill_manual(values = colors, name = "Site") +
  scale_color_manual(values = colors, name = "Site") +
  guides(fill = "none", color = "none") +
  labs(x = "Site", y = "Growth coefficient (*A*)") +
  theme(axis.title.y = ggtext::element_markdown())

fits_ind / A + plot_annotation(tag_levels = "A") #+ plot_layout(heights = c(1, 1.8))

ggsave(paste0(home, "/figures/vb_pars_fits.pdf" ), width = 17, height = 18, units = "cm")

# Supp plot for K and Linf
k <- IVBG %>% 
  ggplot(aes(factor(area, order$area), k, fill = factor(area, order$area))) + 
  coord_cartesian(ylim = c(0, 0.7)) +
  geom_violin(alpha = 0.8, color = NA) +  
  geom_boxplot(outlier.color = NA, width = 0.2, alpha = 0.9, fill = NA, size = 0.4) +
  scale_fill_manual(values = colors, name = "Site") +
  guides(fill = "none", color = "none") +
  labs(x = "Site", y = expression(italic(k)))

linf <- IVBG %>% 
  filter(linf < 2300) %>% 
  filter(linf > 130) %>% 
  ggplot(aes(factor(area, order$area), linf, fill = factor(area, order$area))) + 
  geom_violin(alpha = 0.8, color = NA) +  
  geom_boxplot(outlier.color = NA, width = 0.1, alpha = 0.9, fill = NA, size = 0.4) +
  coord_cartesian(ylim = c(0, 2000)) +
  scale_fill_manual(values = colors, name = "Site") +
  guides(fill = "none", color = "none") +
  labs(x = "", y = expression(paste(italic(L[infinity]), " [mm]")))

k / linf

ggsave(paste0(home, "/figures/supp/vb_k_linf.pdf" ), width = 17, height = 18, units = "cm")
```

## Fit Models 

Overall, $A$ looks very linearly related to temperature in most cases, even when I add gams on top

```{r}
dat <- VBG %>% 
  mutate(temp_sc = (temp - mean(temp)) / sd(temp),
         temp_sq_sc = temp_sc * temp_sc,
         area_f = as.factor(area))

# Non-scaled x-axis
scatter <- ggplot(dat, aes(temp, A, color = factor(area, order$area)), size = 0.6) +
  geom_point(size = 0.9) +
  scale_color_manual(values = colors, name = "Site") +
  scale_fill_manual(values = colors, name = "Site")
  
scatter +
  geom_smooth(method = "gam", formula = y~s(x, k=3), se = FALSE)
```

Now we'll compare a bunch of models different temperature shapes and site-effects

```{r}
#| message: false
#| warning: false
#| results: hide

# Quadratic effect of temperature
m1 <- brm(A ~ area_f + temp_sc + temp_sq_sc,
          data = dat,
          cores = 4,
          chains = 4,
          iter = 4000,
          family = student,
          prior = set_prior("normal(0,5)", class = "b"),
          save_pars = save_pars(all = TRUE),
          seed = 99
          )

# Interaction between area and temperature
m2 <- brm(A ~ area_f * temp_sc,
          data = dat,
          cores = 4,
          chains = 4,
          iter = 4000,
          family = student,
          prior = set_prior("normal(0,5)", class = "b"),
          save_pars = save_pars(all = TRUE),
          seed = 99
          )

# Interaction between area and temperature but common squared term
m3 <- brm(A ~ area_f * temp_sc + temp_sq_sc,
          data = dat,
          cores = 4,
          chains = 4,
          iter = 4000,
          family = student,
          prior = set_prior("normal(0,5)", class = "b"),
          save_pars = save_pars(all = TRUE),
          seed = 99
          )

# Quadratic effect of temperature, full random 
m4 <- brm(A ~ temp_sc + temp_sq_sc + (1 + temp_sc + temp_sq_sc | area_f),
          data = dat,
          cores = 4,
          chains = 4,
          iter = 4000,
          family = student,
          prior = set_prior("normal(0,5)", class = "b"),
          save_pars = save_pars(all = TRUE),
          control = list(adapt_delta = 0.9),
          seed = 99
          )

# random intercept and slope?
m5 <- brm(A ~ temp_sc + (1 + temp_sc | area_f),
          data = dat,
          cores = 4,
          chains = 4,
          iter = 4000,
          family = student,
          prior = set_prior("normal(0,5)", class = "b"),
          save_pars = save_pars(all = TRUE),
          control = list(adapt_delta = 0.95),
          seed = 99
          )
```

Compare all models with loo

```{r}
#| code-fold: false
#| message: false
loo(m1, m2, m3, m4, m5,
    moment_match = TRUE)
```

```{r}
#| eval: false
#| include: false
library(equatiomatic)
library(lme4)

t <- lmer(A ~ temp_sc + temp_sq_sc + (1 + temp_sc + temp_sq_sc | area_f), data = dat)
extract_eq(t)
```

Plot the favorite model

```{r}
#| message: false
performance::r2_bayes(m4)
prior_summary(m4)
m4

# Predict with the main model
m4_pred <- dat %>%
  group_by(area) %>% 
  data_grid(temp_sc = seq_range(temp_sc, n = 100)) %>% 
  ungroup() %>% 
  mutate(area_f = as.factor(area),
         temp = (temp_sc * sd(VBG$temp)) + mean(VBG$temp),
         temp_sq_sc = temp_sc*temp_sc) %>% 
  add_epred_draws(m4)

# Global prediction?
m4_pred_glob <- dat %>%
  data_grid(temp_sc = seq_range(temp_sc, n = 100)) %>% 
  mutate(temp = (temp_sc * sd(VBG$temp)) + mean(VBG$temp),
         temp_sq_sc = temp_sc*temp_sc) %>% 
  add_epred_draws(m4, re_formula = NA)

# Plot area specific predictions as facets
p0 <- scatter + 
  # scale_color_viridis(discrete = TRUE) +
  # scale_fill_viridis(discrete = TRUE) +
  stat_lineribbon(data = m4_pred,
                  aes(temp, y = .epred,
                      fill = factor(area, order$area)),
                  alpha = 0.1, .width = 0.95, linewidth = 0.9) +
  stat_lineribbon(data = m4_pred,
                  aes(temp, y = .epred,
                      fill = factor(area, order$area)),
                  alpha = 1, .width = 0, linewidth = 0.9) +
  # stat_lineribbon(data = m4_pred_glob,
  #                 aes(temp, y = .epred), inherit.aes = FALSE, color = "grey30", fill = "grey30",
  #                 alpha = 1, .width = 0, linewidth = 0.9) + 
  guides(fill = "none", color = guide_legend(nrow = 1, reverse = TRUE,
                                             title.position = "top", title.hjust = 0.5,
                                             override.aes = list(fill = NA),
                                             position = "inside")) + 
  
  theme(legend.position.inside = c(0.5, 0.05),
        axis.title.y = ggtext::element_markdown()) + 
  labs(x = "Mean site temperature [Â°C]", y = "Size-corrected growth coefficient (*A*)",
       color = "")

p0

ggsave(paste0(home, "/figures/a_conditional.pdf" ), width = 17, height = 17, units = "cm")

# Facet
# scatter + 
#   stat_lineribbon(data = m5_pred,
#                   aes(temp, y = .epred,
#                       fill = factor(area, order$area)),
#                   alpha = 0.1, .width = 0.95) + 
#   stat_lineribbon(data = m5_pred,
#                   aes(temp, y = .epred,
#                       fill = factor(area, order$area)),
#                   alpha = 1, .width = 0) + 
#   facet_wrap(~area)
# 
# ggsave(paste0(home, "/figures/supp/A_by_area.pdf" ), width = 17, height = 17, units = "cm")


# Look at the slopes and intercepts by area
mean_temps <- pred_temp %>%
  group_by(area) %>%
  summarise(mean_temp = mean(temp))
 
# p1 <- m4 %>%
#   spread_draws(b_temp_sc, r_area_f[temp_sc,]) %>%
#   median_qi(slope = b_temp_sc + r_area_f, .width = c(.9)) %>%
#   mutate(area = temp_sc) %>% 
#   left_join(mean_temps, by = "area") %>% 
#   ggplot(aes(y = slope, x = mean_temp, ymin = .lower, ymax = .upper,
#              color = factor(area, order$area),
#              fill = factor(area, order$area))) +
#   geom_hline(yintercept = 0, linetype = 2, alpha = 0.5, linewidth = 0.8) + 
#   geom_smooth(method = "lm", inherit.aes = FALSE,
#               aes(mean_temp, slope), alpha = 0.15, color = "grey") +  
#   geom_point() +
#   geom_errorbar(alpha = 0.3) +
#   scale_color_manual(values = colors, name = "Site") + 
#   scale_fill_manual(values = colors, name = "Site") + 
#   labs(y = "Site specific slope", x = "Mean site temperature (Â°C)") + 
#   guides(fill = "none",
#          color = "none") +
#   theme(axis.title.y = ggtext::element_markdown())
# 
p2 <- m4 %>%
  spread_draws(b_Intercept, r_area_f[Intercept,]) %>%
  median_qi(intercept = b_Intercept + r_area_f, .width = c(.9)) %>%
  mutate(area = Intercept) %>%
  left_join(mean_temps, by = "area") %>%
  ggplot(aes(y = intercept, x = mean_temp, ymin = .lower, ymax = .upper,
             color = factor(area, order$area),
             fill = factor(area, order$area))) +
  geom_smooth(method = "lm", inherit.aes = FALSE, linetype = 2,
              aes(mean_temp, intercept), alpha = 0.15, color = "grey") +
  geom_point(size = 2) +
  geom_errorbar(alpha = 0.3) +
  scale_color_manual(values = colors, name = "Site") +
  scale_fill_manual(values = colors, name = "Site") +
  labs(y = "Site-specific intercept", x = "Mean site temperature (Â°C)") +
  guides(fill = "none",
         color = "none") +
  theme(axis.title.y = ggtext::element_markdown())

p2 

ggsave(paste0(home, "/figures/random_intercepts.pdf" ), width = 11, height = 11, units = "cm")

 
# p0 / ((p2 + p1) + plot_layout(axes = "collect")) +
#   plot_annotation(tag_level = "A") + 
#   plot_layout(heights = c(2, 1))
# 
# ggsave(paste0(home, "/figures/a_conditional.pdf" ), width = 17, height = 20, units = "cm")

# Check significance of slopes?!
# get_variables(m5)
# t_inter <- m5 %>%
#   spread_draws(b_Intercept, r_area_f[Intercept,]) %>%
#   median_qi(intercept = b_Intercept + r_area_f, .width = c(.9)) %>%
#   mutate(area = Intercept) %>%
#   left_join(mean_temps, by = "area")
# 
# t_slope <- m5 %>%
#   spread_draws(b_temp_sc, r_area_f[temp_sc,]) %>%
#   median_qi(slope = b_temp_sc + r_area_f, .width = c(.9)) %>%
#   mutate(area = temp_sc) %>%
#   left_join(mean_temps, by = "area")
# 
# tidy(lm(intercept ~ mean_temp, data = t_inter))
# tidy(lm(slope ~ mean_temp, data = t_slope))
```

Plot conceptual model

```{r}
get_variables(m4)

par <- m4 %>%
  spread_draws(b_Intercept, b_temp_sc, b_temp_sq_sc,
               `r_area_f[FM,Intercept]`, `r_area_f[FM,temp_sc]`, `r_area_f[FM,temp_sq_sc]`) %>% 
  ungroup() %>% 
  mutate(intercept = b_Intercept + `r_area_f[FM,Intercept]`,
         b1 = b_temp_sc + `r_area_f[FM,temp_sc]`,
         b2 = b_temp_sq_sc + `r_area_f[FM,temp_sq_sc]`) %>% 
  summarise(intercept = mean(intercept),
            b1 = mean(b1),
            b2 = mean(b2))

# No adaptation
no_adapt_1 <- tibble(temp = seq(5, 15, length.out = 500)) %>% 
  mutate(temp_sc = (temp - mean(VBG$temp) / sd(VBG$temp)),
         temp_sc_sq = temp_sc*temp_sc) %>% 
  mutate(growth_rate = par$intercept + temp_sc*(par$b1 * 3) + temp_sc_sq*(par$b2*0.08),
         pop = "Cold")

no_adapt_2 <- tibble(temp = seq(10, 20, length.out = 500)) %>% 
  mutate(temp_sc = (temp - mean(VBG$temp) / sd(VBG$temp)),
         temp_sc_sq = temp_sc*temp_sc) %>% 
  mutate(growth_rate = par$intercept + temp_sc*(par$b1 * 3) + temp_sc_sq*(par$b2*0.08),
         pop = "Medium",
         growth_rate = growth_rate + 0.5)

no_adapt_3 <- tibble(temp = seq(15, 25, length.out = 500)) %>% 
  mutate(temp_sc = (temp - mean(VBG$temp) / sd(VBG$temp)),
         temp_sc_sq = temp_sc*temp_sc) %>% 
  mutate(growth_rate = par$intercept + temp_sc*(par$b1 * 3) + temp_sc_sq*(par$b2*0.08),
         pop = "Warm",
         growth_rate = growth_rate + 1)


no_adapt <- bind_rows(no_adapt_1, no_adapt_2, no_adapt_3)

p1 <- ggplot(no_adapt, aes(temp, growth_rate, color = pop)) + 
  geom_line(linewidth = 1.2, alpha = 0.8) + 
  labs(tag = "No adaptation", y = "Increasing growth rate â", x = "Increasing temperature â", color = "Site") +
  theme(plot.tag = element_text(size = 9),
        plot.tag.position = c(0.23, 0.94),
        legend.position.inside = c(0.5, 0.1),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(), 
        legend.direction = "horizontal") + 
  guides(color = guide_legend(position = "inside", title.position = "top", title.hjust = 0.5))


p1

# Now do "local adaption
adapt_1 <- tibble(temp = seq(5, 15, length.out = 500)) %>% 
  mutate(temp_sc = (temp - mean(VBG$temp) / sd(VBG$temp)),
         temp_sc_sq = temp_sc*temp_sc) %>% 
  mutate(growth_rate = par$intercept + temp_sc*(par$b1 * 4) + temp_sc_sq*(par$b2*0.18),
         pop = "Cold")

adapt_2 <- tibble(temp = seq(10, 20, length.out = 500)) %>% 
  mutate(temp_sc = (temp - mean(VBG$temp) / sd(VBG$temp)),
         temp_sc_sq = temp_sc*temp_sc) %>% 
  #mutate(growth_rate = par$intercept*0.95 + temp_sc*(par$b1 * 3.5) + temp_sc_sq*(par$b2*0.1),
  mutate(growth_rate = par$intercept*0.976 + temp_sc*(par$b1 * 3) + temp_sc_sq*(par$b2*0.08),
         pop = "Medium",
         growth_rate = growth_rate + 1)

adapt_3 <- tibble(temp = seq(15, 25, length.out = 500)) %>% 
  mutate(temp_sc = (temp - mean(VBG$temp) / sd(VBG$temp)),
         temp_sc_sq = temp_sc*temp_sc) %>% 
  mutate(growth_rate = par$intercept*0.715 + temp_sc*(par$b1 * 5) + temp_sc_sq*(par$b2*0.11),
         pop = "Warm",
         growth_rate = growth_rate + 2)

# ggplot(adapt_3, aes(temp, growth_rate, color = pop)) + 
#   geom_line(linewidth = 1.2, alpha = 0.8) 

adapt <- bind_rows(adapt_1, adapt_2, adapt_3)

p2 <- 
  ggplot(adapt, aes(temp, growth_rate, color = pop)) + 
  geom_line(linewidth = 1.2, alpha = 0.8) + 
  labs(tag = "Local adaptation", y = "Increasing growth rate â", x = "Increasing temperature â") +
  theme(plot.tag = element_text(size = 9),
        plot.tag.position = c(0.2, 0.94),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) + 
  guides(color = "none")

p1 + p2 + 
  plot_layout(axes = "collect") &
  scale_color_manual(values = colors[c(10, 5, 1)])

ggsave(paste0(home, "/figures/concept.pdf"), width = 17, height = 8, units = "cm", device = cairo_pdf)
```

Supplementary plot

```{r}
# Plot prior vs posterior
# Refit with sampling on prior

ggsave(paste0(home, "/figures/supp/pp_check.pdf" ), width = 11, height = 11, units = "cm")

m4p <- brm(A ~ temp_sc + temp_sq_sc + (1 + temp_sc + temp_sq_sc | area_f),
           data = dat,
           cores = 4,
           chains = 4,
           iter = 4000,
           family = student,
           prior = set_prior("normal(0,5)", class = "b"),
           sample_prior = TRUE,
           save_pars = save_pars(all = TRUE),
           control = list(adapt_delta = 0.95),
           )

prior_summary(m4p)

get_variables(m4p)

plot(m4)

post_draws <- get_post_draws(model = m4p, 
                             params = c("b_Intercept", "b_temp_sc", "sigma",
                                        "nu"))

prior_draws <- get_prior_draws(model = m4p, 
                               params = c("prior_Intercept", "prior_b", "prior_sigma",
                                          "prior_nu"))

dist <- bind_rows(post_draws %>%
                    mutate(parameter = ifelse(parameter == "b_Intercept",
                                              "Intercept",
                                              parameter),
                           
                           parameter = ifelse(parameter == "b_temp_sc",
                                              "temp_sc",
                                              parameter)),
                  
                  prior_draws %>%
                    mutate(parameter = ifelse(parameter == "b", "temp_sc",
                                              parameter))
                  )

plot_prior_post(dist, type) +
  theme(legend.position.inside = c(0.93, 0.97)) +  
  guides(fill = guide_legend(position = "inside")) +  
  labs(x = "Value", y = "Density") +
  facet_wrap(~parameter, scales = "free")

ggsave(paste0(home, "/figures/supp/brms_prior.pdf" ), width = 17, height = 17, units = "cm")

# Posterior predictive
pp_check(m4p) + 
  theme(legend.position.inside = c(0.8, 0.8)) + 
  guides(color = guide_legend(position = "inside")) + 
  labs(x = "Growth coefficient (*A*)")
```

Fit models of K and Linf to temperature

```{r K}
# Quadratic effect of temperature
m4k <- brm(k ~ temp_sc + temp_sq_sc + (1 + temp_sc + temp_sq_sc | area_f),
           data = dat,
           cores = 4,
           chains = 4,
           iter = 4000,
           seed = 99,
           family = student,
           prior = set_prior("normal(0,5)", class = "b"),
           save_pars = save_pars(all = TRUE),
           control = list(adapt_delta = 0.999),
           )

prior_summary(m4k)
```


```{r linf}
m4l <- brm(linf ~ temp_sc + temp_sq_sc + (1 + temp_sc + temp_sq_sc | area_f),
           data = dat,
           cores = 4,
           chains = 4,
           iter = 4000,
           seed = 99,
           family = student,
           prior = set_prior("normal(0,5)", class = "b"),
           save_pars = save_pars(all = TRUE)
           )

prior_summary(m4l)
```

Plot these fits

```{r}
# PP_check
p1 <- pp_check(m4k) + 
  theme(legend.position.inside = c(0.8, 0.8),
        axis.title.x = element_markdown()) + 
  guides(color = guide_legend(position = "inside")) + 
  labs(x = "*k*")

p2 <- pp_check(m4l) + 
  coord_cartesian(xlim = c(0, 1000)) + 
  theme(legend.position.inside = c(0.8, 0.8)) + 
  guides(color = guide_legend(position = "inside")) + 
  labs(x = expression(paste(italic(L[infinity]), " [mm]")))

p1 + p2

ggsave(paste0(home, "/figures/supp/k_linf_pp_check.pdf" ), width = 17, height = 11, units = "cm")


# Conditional predictions
m4k_pred <- dat %>%
  group_by(area) %>% 
  data_grid(temp_sc = seq_range(temp_sc, n = 100)) %>% 
  ungroup() %>% 
  mutate(area_f = as.factor(area),
         temp_sq_sc = temp_sc*temp_sc,
         temp = (temp_sc * sd(VBG$temp)) + mean(VBG$temp)) %>% 
  add_epred_draws(m4k)

m4l_pred <- dat %>%
  group_by(area) %>% 
  data_grid(temp_sc = seq_range(temp_sc, n = 100)) %>% 
  ungroup() %>% 
  mutate(area_f = as.factor(area),
         temp_sq_sc = temp_sc*temp_sc,
         temp = (temp_sc * sd(VBG$temp)) + mean(VBG$temp)) %>% 
  add_epred_draws(m4l)

#m4_kl <- bind_rows(m4k_pred, m4l_pred)

# K  
pk <- ggplot(dat, aes(temp, k, color = factor(area, order$area)), size = 0.6) +
  geom_point() +
  scale_color_manual(values = colors, name = "Site") +
  scale_fill_manual(values = colors, name = "Site") +
  guides(fill = "none",
         color = guide_legend(nrow = 1, reverse = TRUE, title.position = "top", title.hjust = 0.5,
                              override.aes = list(size = 1))) +
  theme(axis.title.y = ggtext::element_markdown(),
        legend.position = "bottom",
        legend.direction = "horizontal") + 
  stat_lineribbon(data = m4k_pred,
                  aes(temp, y = .epred,
                      fill = factor(area, order$area)),
                  alpha = 0.1, .width = 0.95) +
  stat_lineribbon(data = m4k_pred,
                  aes(temp, y = .epred,
                      fill = factor(area, order$area)),
                  alpha = 1, .width = 0) +
  guides(fill = "none", color = guide_legend(nrow = 1, reverse = TRUE,
                                             title.position = "top", title.hjust = 0.5,
                                             override.aes = list(fill = NA))) + 
  labs(x = "Mean site temperature [Â°C]", y = "*k*", color = "")

# Linf
pl <- ggplot(dat, aes(temp, linf, color = factor(area, order$area)), size = 0.6) +
  geom_point() +
  scale_color_manual(values = colors, name = "Site") +
  scale_fill_manual(values = colors, name = "Site") +
  theme(legend.position = "bottom",
        legend.direction = "horizontal") +
  stat_lineribbon(data = m4l_pred,
                  aes(temp, y = .epred,
                      fill = factor(area, order$area)),
                  alpha = 0.1, .width = 0.95) +
  stat_lineribbon(data = m4l_pred,
                  aes(temp, y = .epred,
                      fill = factor(area, order$area)),
                  alpha = 1, .width = 0) +
  guides(fill = "none", color = guide_legend(nrow = 1, reverse = TRUE,
                                             title.position = "top", title.hjust = 0.5,
                                             override.aes = list(fill = NA))) + 
  labs(x = "Mean site temperature [Â°C]", y = expression(paste(italic(L[infinity]), " [mm]")),
       color = "")

pk / pl + 
  plot_layout(axis = "collect", guides = "collect") & 
  theme(legend.position = "bottom")

ggsave(paste0(home, "/figures/supp/k_linf_conditional.pdf" ), width = 17, height = 25, units = "cm")
```

Print global temperature slopes

```{r}
summary(m4k)
summary(m4l)
```

Calculate VBGE fits for specific temperatures curves. Since the global effects of temperature are flat, we have to do it with area-specific predictions. But which ones? Here I predict k and Linf for 2 temperatures: mean in area and +3 Â°C. I then use those to calculate reference and warm VBGE curves. There's a tendency for an increase in size-at-age in warmer areas. This we sort of see already in the plots of Linf against temperature by area, where cool populations decline and warm increase their Linf.

```{r}
# Area specific parameters, then calculate growth curves from those

# For the plots below I trim age to 12, which is approximate maximum... with 40, we are essentially just plotting Linf, which we already have better plots for
age_bc <- 0:40 

# Predict k across areas
m4k_pars <- dat %>%
  group_by(area_f) %>% 
  data_grid(temp = mean(temp)) %>% 
  ungroup() %>% 
  mutate(temp2 = temp + 3) %>% 
  pivot_longer(c("temp2", "temp"), values_to = "temp") %>%
  dplyr::select(-name) %>% 
  mutate(temp_sc = (temp - mean(dat$temp)) / sd(dat$temp),
         temp_sq_sc = temp_sc*temp_sc) %>% 
  add_epred_draws(m4k) %>% 
  rename(k = .epred) %>% 
  group_by(temp, area_f) %>%
  summarise(k_median = quantile(k, prob = 0.5),
            k_lwr = quantile(k, prob = 0.05),
            k_upr = quantile(k, prob = 0.95))


m4l_pars <- dat %>%
  group_by(area_f) %>% 
  data_grid(temp = mean(temp)) %>% 
  ungroup() %>% 
  mutate(temp2 = temp + 3) %>% 
  pivot_longer(c("temp2", "temp"), values_to = "temp") %>%
  dplyr::select(-name) %>% 
  mutate(temp_sc = (temp - mean(dat$temp)) / sd(dat$temp),
         temp_sq_sc = temp_sc*temp_sc) %>% 
  add_epred_draws(m4l) %>% 
  rename(linf = .epred) %>% 
  group_by(temp, area_f) %>% 
  summarise(linf_median = quantile(linf, prob = 0.5),
            linf_lwr = quantile(linf, prob = 0.05),
            linf_upr = quantile(linf, prob = 0.95))

est <- left_join(m4k_pars, 
                 m4l_pars,
                 by = c("area_f", "temp"))

# Expand by age and calculate length-at-age
est_sum <- est %>% 
  crossing(age_bc) %>% 
  mutate(length_mm = linf_median*(1-exp(-k_median*age_bc)),
         length_mm_lwr = linf_lwr*(1-exp(-k_lwr*age_bc)),
         length_mm_upr = linf_upr*(1-exp(-k_upr*age_bc))) %>% 
  group_by(area_f) %>% 
  mutate(temp_cat = ifelse(temp == min(temp), "Mean Â°C", "Mean + 2Â°C"))

pal <- rev(brewer.pal(n = 6, name = "Paired")[c(2, 6)])

est_sum %>% 
  ggplot(aes(age_bc, length_mm, color = temp_cat)) +  
  geom_ribbon(aes(age_bc, ymin = length_mm_lwr, ymax = length_mm_upr, fill = temp_cat),
              alpha = 0.3, color = NA) +
  geom_line() +
  coord_cartesian(xlim = c(0, 12)) +
  scale_color_manual(values = pal, name = "Temperature") +
  scale_fill_manual(values = pal, name = "Temperature") +
  facet_wrap(~factor(area_f, rev(order$area)), ncol = 4) + 
  theme(legend.position = "bottom") +
  labs(x = "Age (years)", y = "Predicted length (mm)")
  
# Difference in size-at-age?
warm <- est_sum %>% 
  filter(temp_cat == "Mean + 2Â°C") %>% 
  dplyr::select(area_f, length_mm, age_bc) %>%
  rename(length_mm_warm = length_mm)

ref <- est_sum %>% 
  filter(temp_cat == "Mean Â°C") %>% 
  dplyr::select(area_f, length_mm, age_bc) %>%
  rename(length_mm_ref = length_mm)

delta <- left_join(warm, ref, by = c("area_f", "age_bc")) %>% 
  mutate(diff = length_mm_warm - length_mm_ref)
  
ggplot(delta, aes(age_bc, diff, color = factor(area_f, order$area))) +
  geom_line() +
  coord_cartesian(xlim = c(0, 12)) +
  labs(x = "Age", color = "Area",
       y = "Difference in size-at-age with 3 st.dev. increase in temperature (mm)") + 
  scale_color_manual(values = colors)
```

